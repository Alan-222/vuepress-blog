(window.webpackJsonp=window.webpackJsonp||[]).push([[79],{485:function(e,t,a){"use strict";a.r(t);var n=a(2),s=Object(n.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"前言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[e._v("#")]),e._v(" 前言")]),e._v(" "),t("p",[e._v("页面框架和内容区域都构建完毕，接下来准备实现一些细节的东西。")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("多页签")]),e._v("，在本系统中，当点击导航菜单时会切换路由，一般是在内容区域的"),t("code",[e._v("Outlet")]),e._v("路由视图中直接显示对应路由的页面组件，"),t("strong",[e._v("利用"),t("code",[e._v("React Router")]),e._v("配合"),t("code",[e._v("Ant Design")]),e._v("的"),t("code",[e._v("tab")]),e._v("组件实现多页签功能")]),e._v("，打开一个新的菜单路由时变成弹出一个新的 tab 页签，并且随时可以切换到之前的页面，"),t("strong",[e._v("保留")]),e._v("住之前的组件状态。")]),e._v(" "),t("li",[t("strong",[e._v("面包屑")]),e._v("，当系统拥有超过两级以上的层级结构时或需要告知用户『你在哪里』时，并且需要向上导航的功能时就需要面包屑。"),t("strong",[e._v("利用"),t("code",[e._v("React Router")]),e._v("配合"),t("code",[e._v("Ant Design")]),e._v("的"),t("code",[e._v("Breadcrumb")]),e._v("组件实现面包屑功能")]),e._v("。当打开一个菜单路由，会在页面上显示当前路由的层级结构，并且能返回上层。")])]),e._v(" "),t("h2",{attrs:{id:"多页签实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多页签实现"}},[e._v("#")]),e._v(" 多页签实现")]),e._v(" "),t("p",[e._v("为了实现多页签，我们需要一个数组记录路由的路径、标题信息等。但数组信息不止限定在多页签组件中使用，其它组件也可能用到，所以我们设置一个全局状态来存储。")]),e._v(" "),t("h3",{attrs:{id:"全局缓存多页签数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#全局缓存多页签数组"}},[e._v("#")]),e._v(" 全局缓存多页签数组")]),e._v(" "),t("p",[e._v("在 store 文件夹下的 reducers 文件夹新建"),t("code",[e._v("tabSlice")]),e._v("切片，里面存储状态"),t("code",[e._v("tabs")]),e._v("数组，并且在"),t("code",[e._v("reducers")]),e._v("配置项中添加新增和删除的方法。")]),e._v(" "),t("p",[t("strong",[e._v("src/store/reducers/tabSlice.js")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("import { createSlice } from '@reduxjs/toolkit'\n​\nconst tabSlice = createSlice({\n  name: 'tabs',\n  initialState: {\n    tabs: []\n  },\n  reducers: {\n    // 新增tab\n    addTab: (state, action) => {\n      state.tabs.push(action.payload)\n    },\n    // 删除tab\n    removeTab: (state, action) => {\n      state.tabs = state.tabs.filter((tab) => tab.key !== action.payload)\n    }\n  }\n})\n​\nexport const { setActiveKey, addTab, removeTab } = tabSlice.actions\nexport default tabSlice\n")])])]),t("p",[e._v("然后在"),t("code",[e._v("store")]),e._v("中新增此切片")]),e._v(" "),t("p",[t("strong",[e._v("src/store/index.js")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 创建store对象\nconst store = configureStore({\n  reducer: {\n    user: userSlice.reducer,\n    permission: permissionSlice.reducer,\n    // tabs切片\n    tabs: tabSlice.reducer\n  },\n  ...\n})\n")])])]),t("h3",{attrs:{id:"tabs-组件展示及新增切换删除功能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tabs-组件展示及新增切换删除功能"}},[e._v("#")]),e._v(" tabs 组件展示及新增切换删除功能")]),e._v(" "),t("p",[t("code",[e._v("Ant Design")]),e._v("提供了"),t("code",[e._v("Tabs")]),e._v("组件，找一个功能差不多的，样式如下")]),e._v(" "),t("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/52e9b455fcc84109aeb3c257380f9471~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1710&h=226&s=10018&e=png&b=ffffff",alt:"img.png",referrerpolicy:"no-referrer"}}),e._v(" "),t("p",[e._v("所用到的配置项，其中"),t("code",[e._v("destroyInactiveTabPane")]),e._v("默认为"),t("code",[e._v("false")]),e._v("不销毁隐藏时 DOM 的结构即可实现缓存。")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("配置项")]),e._v(" "),t("th",[e._v("类型")]),e._v(" "),t("th",[e._v("说明")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[t("code",[e._v("type")])]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[e._v("页签的基本样式，可选 "),t("code",[e._v("line")]),e._v("、"),t("code",[e._v("card")]),e._v(" "),t("code",[e._v("editable-card")]),e._v(" 类型")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("activeKey")])]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[e._v("当前激活选项卡的 key")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("hideAdd")])]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("是否隐藏加号图标，在 "),t("code",[e._v('type="editable-card"')]),e._v(" 时有效")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("destroyInactiveTabPane")])]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("隐藏时是否销毁 DOM 结构，默认为 false 不销毁")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("items")])]),e._v(" "),t("td",[e._v("{"),t("code",[e._v("label")]),e._v(":选项卡显示标题,"),t("code",[e._v("key")]),e._v(":选项卡对应 key,"),t("code",[e._v("children")]),e._v(":选项卡显示内容,"),t("code",[e._v("closable")]),e._v(":是否显示选项卡的关闭按钮，在 "),t("code",[e._v('type="editable-card"')]),e._v(" 时有效}[]")]),e._v(" "),t("td",[e._v("配置选项卡内容")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("onChange")])]),e._v(" "),t("td",[e._v("function("),t("code",[e._v("activeKey")]),e._v(") {}")]),e._v(" "),t("td",[e._v("切换选项卡的回调，"),t("code",[e._v("activeKey")]),e._v("为选中选项卡的 key")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("onEdit")])]),e._v(" "),t("td",[e._v("function("),t("code",[e._v("targetKey")]),e._v(":选中选项卡 key, "),t("code",[e._v("action")]),e._v(":新增 add 删除 remove){}")]),e._v(" "),t("td",[e._v("新增和删除页签的回调，在 "),t("code",[e._v('type="editable-card"')]),e._v(" 时有效")])])])]),e._v(" "),t("p",[e._v("我们直接用它的代码，Tabs 组件渲染配置项"),t("code",[e._v("items")]),e._v("使用"),t("strong",[e._v("全局状态的 tabs 数组")]),e._v("，然后将其封装为一个组件在"),t("code",[e._v("Layout")]),e._v("组件使用。")]),e._v(" "),t("p",[t("strong",[e._v("src/Layout/components/TabsView.jsx")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("import React, { useEffect, useMemo, useState } from 'react'\nimport { Tabs, ConfigProvider } from 'antd'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { addTab, removeTab } from '@/store/reducers/tabSlice'\n​\nconst TabsView = React.memo(({ pathname }) => {\n  // 获取全局tabs\n  const tabs = useSelector((state) => state.tabs.tabs)\n  const dispatch = useDispatch()\n  // 当前选中tab\n  const [activeKey, setActiveKey] = useState()\n  // Tabs渲染所用数组，当长度为1时Tab项不显示关闭\n  const tabItems = useMemo(() => {\n    return tabs.map((item) => ({...item,closable: tabs.length > 1}))\n  }, [tabs])\n  useEffect(() => {\n    if (pathname !== '/') {\n      setActiveKey(pathname)\n      // 数组中无此项，进行添加\n      if (!tabs.some((item) => item.key === pathname)) {\n        onAddTab(pathname)\n      }\n    }\n  }, [pathname])\n  /** tab操作方法 */\n  // tab切换事件\n  const handleTabChange = (activeKey) => {\n    ...\n  }\n  // 添加方法\n  const onAddTab = (pathname) => {\n    ...\n  }\n  // 点击关闭\n  const closeTab = (targetKey) => {\n     ...\n  }\n​\n  const handleEdit = (targetKey, action) => {\n    if (action === 'remove') {\n      closeTab(targetKey)\n    }\n  }\n  return (\n    <ConfigProvider\n      theme={{\n        components: {\n          Tabs: {\n            // 横向标签页标签外间距\n            horizontalMargin: 0\n          }\n        }\n      }}>\n      <div style={{ backgroundColor: '#fff' }}>\n        <Tabs\n          type=\"editable-card\"\n          onChange={handleTabChange}\n          activeKey={activeKey}\n          onEdit={handleEdit}\n          items={tabItems}\n          hideAdd\n        />\n      </div>\n    </ConfigProvider>\n  )\n})\nexport default TabsView\n")])])]),t("h4",{attrs:{id:"获取所有菜单项"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#获取所有菜单项"}},[e._v("#")]),e._v(" 获取所有菜单项")]),e._v(" "),t("p",[e._v("Tabs 组件大致的框架已经完成了，但是现在还展示不出东西，原因是我们没有新增项到全局数据"),t("code",[e._v("tabs")]),e._v("中。但在新增之前，我们得要获取"),t("strong",[e._v("最底层的菜单项（无子菜单的菜单项）")]),e._v(" 的信息，这样对应可以获取"),t("strong",[e._v("当前路由路径的路由信息")]),e._v("（标题等）。")]),e._v(" "),t("p",[e._v("在 Layout 组件中，我们有获取过全局的后端路由，可以通过它做结构转换，获取需要的"),t("strong",[e._v("底层菜单项数组")]),e._v("。后端路由结构类似"),t("code",[e._v("[{title:'xx',children:[xx]},{...}]")]),e._v("，我们只需要把不存在 children 字段或 children 字段为空的提取出来即可。")]),e._v(" "),t("p",[t("strong",[e._v("src/Layout/index.jsx")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("import TabsView from './components/TabsView'\n// 提取底层路由方法\nconst getMenus = (routes) => {\n  let menus = []\n  function getMenuItem(route) {\n    route.forEach((item) => {\n      if (item.children && item.children.length) getMenuItem(item.children)\n      else {\n        // 排除默认路由\n        if (item.path) menus.push(item)\n      }\n    })\n  }\n  getMenuItem(routes)\n  return menus\n}\n")])])]),t("p",[e._v("然后我们用"),t("code",[e._v("useMemo")]),e._v("hook 缓存返回值赋值给一个变量，注意添加上首页路由，将其赋值给上一步创建的"),t("code",[e._v("TabsView")]),e._v("组件。我们再额外传递切换选项卡跳转路由的方法（"),t("strong",[e._v("注意传给"),t("code",[e._v("React.memo")]),e._v("包裹的子组件函数要用"),t("code",[e._v("useCallback")]),e._v("hook 包裹缓存，不然会报错")]),e._v("）")]),e._v(" "),t("p",[t("strong",[e._v("src/Layout/index.jsx")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const LayoutApp=()=>{\n  const {pathname}=useLocation()\n  // 获取后端权限路由\n  const permissionRoutes = useSelector((state) => state.permission.permissionRoutes)\n  // 格式化路由数组\n  const Home = lazy(() => import('@/pages/Home'))\n  const formatRoutes = useMemo(() => {\n    return [{ title: '首页', menuPath: '/home',element:<Home /> }].concat(getMenus(permissionRoutes))\n  }, [permissionRoutes])\n  // 选择选项卡以后，跳转对应路由\n  const selectTab = useCallback(\n    (key) => {\n      navigate(key)\n    },\n    [navigate]\n  )\n  ...\n  return(\n    ...\n      <Content\n      style={{\n        // padding: 24,\n        minHeight: 280\n        // background: colorBgContainer\n      }}>\n      <TabsView pathname={pathname} formatRoutes={formatRoutes} selectTab={selectTab}/>\n    </Content>\n  )\n}\n")])])]),t("h4",{attrs:{id:"新增事件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#新增事件"}},[e._v("#")]),e._v(" 新增事件")]),e._v(" "),t("p",[e._v("获取底层路由数组后，我们就可以进行选项卡的添加。")]),e._v(" "),t("p",[t("strong",[e._v("src/Layout/components/TabsView.jsx")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const TabsView = React.memo(({ pathname, formatRoutes, selectTab }) => {\n  // 添加方法\n  const onAddTab = (pathname) => {\n    // 找到对应路径的菜单信息\n    const menu = formatRoutes.find((item) => item.menuPath === pathname)\n    if (menu) dispatch(addTab({ label: menu.title, key: menu.menuPath,\n    children: <div style={{ padding: 24, backgroundColor: '#f5f5f5' }}>{menu.element}</div> }))\n  }\n}\n")])])]),t("h4",{attrs:{id:"切换事件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#切换事件"}},[e._v("#")]),e._v(" 切换事件")]),e._v(" "),t("p",[e._v("切换选项卡会调用 Tabs 组件的"),t("code",[e._v("onChange")]),e._v("回调函数，传递的参数为切换的选项卡的 key。随后"),t("strong",[e._v("调用父组件传来的跳转事件并传递跳转路径即 key")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// tab切换事件\nconst handleTabChange = (activeKey) => {\n  selectTab(activeKey)\n}\n")])])]),t("h4",{attrs:{id:"删除事件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#删除事件"}},[e._v("#")]),e._v(" 删除事件")]),e._v(" "),t("p",[e._v("删除事件是点击选项卡右上角的关闭按钮后会调用 Tabs 组件的"),t("code",[e._v("onEdit")]),e._v("回调，传递的参数为选项卡 key 和"),t("code",[e._v("action")]),e._v("为"),t("code",[e._v("remove")]),e._v("。随后有两个步骤")]),e._v(" "),t("p",[e._v("1.关闭当前选项卡后，"),t("strong",[e._v("左边是否有选项卡【tabs 数组上一项】，有则选中跳转左边的选项卡，否则选中跳转右边的选项卡【tabs 数组下一项】")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" // 点击选项卡关闭\nconst closeTab = (targetKey) => {\n  // 获取删除后的数组\n  const afterRemoveTabs = tabs.filter((item) => item.key !== targetKey)\n  // 获取选中跳转的数组下标\n  const selectIndex = tabs.findIndex((item) => item.key === targetKey) - 1\n  if (selectIndex >= 0) {\n    selectTab(afterRemoveTabs[selectIndex].key)\n  } else {\n    selectTab(afterRemoveTabs[selectIndex + 1].key)\n  }\n}\n")])])]),t("p",[e._v("2.删除"),t("strong",[e._v("全局状态")]),e._v("中的当前项")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const closeTab = (targetKey) => {\n  ...\n  dispatch(removeTab(targetKey))\n}\n")])])]),t("h4",{attrs:{id:"效果图"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#效果图"}},[e._v("#")]),e._v(" 效果图")]),e._v(" "),t("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d7b2cf505ac84c09a5ed12a0875bc458~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=2559&h=1206&s=92249&e=png&b=fbfbfb",alt:"img.png",referrerpolicy:"no-referrer"}}),e._v(" "),t("h2",{attrs:{id:"面包屑实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#面包屑实现"}},[e._v("#")]),e._v(" 面包屑实现")]),e._v(" "),t("p",[e._v("面包屑我们直接用"),t("code",[e._v("Ant Design")]),e._v("提供的"),t("code",[e._v("Breadcrumb")]),e._v("组件，我们用到其中的"),t("code",[e._v("items")]),e._v("来配置路由栈信息，items 的配置项如下所示")]),e._v(" "),t("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f05e88663bf942be89bb44011ce62083~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1804&h=691&s=69678&e=png&b=fefefe",alt:"img.png",referrerpolicy:"no-referrer"}}),e._v(" "),t("p",[e._v("我们只用到其中的"),t("code",[e._v("title")]),e._v("来实现跳转及展示功能。在这之前，我们得先"),t("strong",[e._v("获得路由的平铺对象")]),e._v("（即每一级路由"),t("code",[e._v("url")]),e._v("与标题一一对应的对象），例如"),t("code",[e._v("{'/home':'首页','/system':'系统管理'}")]),e._v("，然后我们再获取页面当前路由的路由路径数组例如"),t("code",[e._v("['system','user']")]),e._v("一个个拼接去与这个对象作对应。")]),e._v(" "),t("h3",{attrs:{id:"获得路由的平铺对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#获得路由的平铺对象"}},[e._v("#")]),e._v(" 获得路由的平铺对象")]),e._v(" "),t("p",[e._v("我们用全局状态中的后端路由"),t("code",[e._v("permissonRoutes")]),e._v("拼接上首页后进行递归遍历。")]),e._v(" "),t("p",[t("strong",[e._v("src/utils/common.js")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/**\n * 面包屑获取路由平铺对象 ,\n * @param {*} routes\n * @returns object, 例:{\"/home\":\"首页\"}\n */\nexport const getBreadcrumbNameMap = (routes) => {\n  //首先拼接上首页\n  const list = [{ path: 'home', menuPath: '/home', title: '首页' }, ...routes]\n  let breadcrumbNameObj = {}\n  const getItems = (list) => {\n    //先遍历数组\n    list.forEach((item) => {\n      //遍历数组项的对象\n      if (item.children && item.children.length) {\n        const menuPath = item.menuPath ? item.menuPath : '/' + item.path\n        breadcrumbNameObj[menuPath] = item.title\n        getItems(item.children)\n      } else {\n        breadcrumbNameObj[item.menuPath] = item.title\n      }\n    })\n  }\n  //调用一下递归函数\n  getItems(list)\n  //返回新数组\n  return breadcrumbNameObj\n}\n")])])]),t("p",[e._v("然后在"),t("code",[e._v("Layout")]),e._v("组件中用"),t("code",[e._v("useMemo hook")]),e._v("来缓存方法返回值")]),e._v(" "),t("p",[t("strong",[e._v("src/Layout/index.jsx")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("import {getBreadcrumbNameMap} from '@/utils/common'\n...\n// 获取全局状态中的后端路由\nconst permissionRoutes = useSelector((state) => state.permission.permissionRoutes)\n// 缓存面包屑的路由平铺对象\nconst breadcrumbNameMap = useMemo(() => getBreadcrumbNameMap(permissionRoutes), [permissionRoutes])\n")])])]),t("h3",{attrs:{id:"获取页面路由路径数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#获取页面路由路径数组"}},[e._v("#")]),e._v(" 获取页面路由路径数组")]),e._v(" "),t("p",[e._v("我们通过"),t("code",[e._v("useLocation hook")]),e._v("获取的"),t("code",[e._v("pathname")]),e._v("是类似"),t("code",[e._v("/system/user")]),e._v("这样的，我们需要将其转换为数组。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const { pathname } = useLocation()\n// 获取页面路由路径数组\nconst pathSnippets = pathname.split('/').filter((i) => i)\n")])])]),t("p",[e._v("然后我们遍历这个数组，转换为"),t("strong",[e._v("面包屑 items 配置项所需格式")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/** 面包屑 */\nconst breadcrumbNameMap = useMemo(() => getBreadcrumbNameMap(permissionRoutes), [permissionRoutes])\nconst breadcrumbItems = pathSnippets.map((_, index) => {\n  const url = `/${pathSnippets.slice(0, index + 1).join('/')}`\n  // 如果是最后一项，即当前页面路由，渲染文本不可点击跳转\n  if (index + 1 === pathSnippets.length)\n    return {\n      key: url,\n      title: breadcrumbNameMap[url]\n    }\n  // 其余用link标签可点击跳转（注意：上级路由默认跳转到其定义的重定向路由，例如/system跳转至/system/user）\n  return {\n    key: url,\n    title: <Link to={url}>{breadcrumbNameMap[url]}</Link>\n  }\n})\n")])])]),t("p",[e._v("最后展示面包屑组件，先引入组件")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("import { Breadcrumb } from 'antd'\n")])])]),t("p",[t("code",[e._v("Layout组件")]),e._v("中展示")]),e._v(" "),t("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3b0078591f994ff5b1fa6160b7335cce~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=981&h=916&s=99064&e=png&b=282c34",alt:"img.png",referrerpolicy:"no-referrer"}}),e._v(" "),t("h3",{attrs:{id:"最终效果"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#最终效果"}},[e._v("#")]),e._v(" 最终效果")]),e._v(" "),t("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7417dece67fc4c50a245015993c8b34e~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=2559&h=1206&s=99479&e=png&b=fafafa",alt:"img.png",referrerpolicy:"no-referrer"}}),e._v(" "),t("h2",{attrs:{id:"代码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#代码"}},[e._v("#")]),e._v(" 代码")]),e._v(" "),t("p",[e._v("上述实现的代码都放在"),t("a",{attrs:{href:"https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2FAlan-222%2Freact-antd5-admin",title:"https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2FAlan-222%2Freact-antd5-admin",target:"_blank",rel:"noopener noreferrer"}},[e._v("react-antd5-admin"),t("OutboundLink")],1),e._v("，大家可自行查阅")])])}),[],!1,null,null,null);t.default=s.exports}}]);