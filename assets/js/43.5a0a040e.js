(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{449:function(t,e,a){"use strict";a.r(e);var s=a(2),r=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),e("p",[t._v("在之前的文章中，我们讲解了 Vuex 如何利用 state 与 mutations、actions 进行集中状态的管理、Vuex 通过 getters 对 state 中的数据进行加工以及 Vuex 四个 map 方法的使用，本文我们将继续对 Vuex 的模块化操作进行讲解。")]),t._v(" "),e("h2",{attrs:{id:"概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[t._v("#")]),t._v(" 概念")]),t._v(" "),e("p",[t._v("Vue 官网对于 Vuex 模块化做出了这样的定义：如果你的 store 文件太大，只需将 action、mutation 和 getter 分割到单独的文件。对于大型应用，我们会希望把 Vuex 相关代码分割到模块中。下面是项目结构示例：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(" store\n    ├── index.js          # 我们组装模块并导出 store 的地方\n    ├── actions.js        # 根级别的 action\n    ├── mutations.js      # 根级别的 mutation\n    └── modules\n        ├── cart.js       # 购物车模块\n        └── products.js   # 产品模块\n")])])]),e("p",[t._v("我们便依据官网给的结构来进行简单演示。")]),t._v(" "),e("h2",{attrs:{id:"案例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#案例"}},[t._v("#")]),t._v(" 案例")]),t._v(" "),e("p",[t._v("案例对于实际需求进行粗略实现，所以 actions 以及 mutation 就不单独拆分出来了，只要能达到 Vuex 模块化需求即可。")]),t._v(" "),e("h3",{attrs:{id:"设计"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#设计"}},[t._v("#")]),t._v(" 设计")]),t._v(" "),e("p",[t._v("我们先来大概设计一下页面的结构，分析一下数据就是要有一个产品列表")]),t._v(" "),e("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/10d8521364e2482493127aa2316e6dd1~tplv-k3u1fbpfcp-watermark.image?",alt:"img.png",referrerpolicy:"no-referrer"}}),t._v(" "),e("h3",{attrs:{id:"实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实现"}},[t._v("#")]),t._v(" 实现")]),t._v(" "),e("p",[e("strong",[t._v("页面")])]),t._v(" "),e("p",[t._v("1.products.vue")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(' \n<h3>这里是products</h3>\n \n<ul>\n       \n  <li v-for="(item,index) in productList" :key="index">\n              {{item.name}}--{{item.desc}}--{{item.price}}           <button @click="addToCart">加入购物车</button>    \n     \n  </li>\n   \n</ul>\n')])])]),e("p",[t._v("2.cart.vue")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(' \n<h3>这里是cart</h3>\n \n<ul>\n       \n  <li v-for="(item,index) in cartList" :key="index">          {{item.name}}--{{item.desc}}--{{item.price}}      </li>\n   \n</ul>\n')])])]),e("p",[t._v("Vuex"),e("strong",[t._v("中准备数据及方法")])]),t._v(" "),e("p",[t._v("这里要先说到一个东西，命名空间：namesapced:true，当模块被导入注册之后，它的所有配置项都会自动根据模块注册的路径调整命名，也就是说，我们在调用这些方法时，需要加上这个文件的路径(比如我要访问这个文件中的 state 里边的某个属性：this.$store.state.car。后边这个 car 就是多了个 car.js 模块名，因为如果不加模块名，那我们会访问所有模块中的属性，那就乱了)，所以我们要加上命名空间，相当于独立的区块去使用，模块和模块之间互不干扰。")]),t._v(" "),e("p",[t._v("1.module/products.js")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("export default {\n  namespaced: true,\n  state: {\n    productList: [\n      { name: '苹果', desc: '红，可口', price: 6 },\n      { name: '橘子', desc: '甘甜、微酸', price: 4 },\n      { name: '香蕉', desc: '软、条状', price: 8 },\n      { name: '西瓜', desc: '椭圆、绿', price: 20 },\n      { name: '樱桃', desc: '小，圆', price: 40 }\n    ]\n  }\n};\n")])])]),e("p",[t._v("2.module/cart.js")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("export default {\n  namespaced: true,\n  state: {\n    cartList: [\n      { name: '男鞋', desc: '红,41码', price: 300 },\n      { name: '男T恤', desc: '170cm', price: 200 }\n    ]\n  }\n};\n")])])]),e("p",[t._v("3.store 下 index.js")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import Vue from \"vue\";\nimport Vuex from 'vuex';\nimport products from './modules/products'\nimport cart from './modules/cart'\nVue.use(Vuex)\n​\nconst mutations={\n    addToCart(state, value) {\n        state.cart.cartList.push(value)\n    }\n}\nexport default new Vuex.Store({\n    mutations,\n    modules: {\n        products,\n        cart\n    }\n})\n")])])]),e("p",[e("strong",[t._v("页面中使用")])]),t._v(" "),e("p",[t._v("products.vue")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("  computed: { /*       //方式一：直接自己读取     productList(){         return this.$store.state.products.productList  \n  }   */     //方式二：借助mapState读取，第一个参数为store的index.js文件中暴露的modules名    \n...mapState('products',['productList']),   },   methods: {       /*       addToCart(item){          \nconsole.log(\"成功加入购物车\");           //方式一：自己直接commit           this.$store.commit('addToCart',item)      \n}, */           //方式二：借助mapMutations：此处因为直接在index.js文件中定义mutations就不用加第一个命名参数      \n...mapMutations(['addToCart']),   },\n")])])]),e("p",[e("strong",[t._v("效果")])]),t._v(" "),e("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ad59be7b4e964175a1ba12d53dd3de2c~tplv-k3u1fbpfcp-watermark.image?",alt:"img.png",referrerpolicy:"no-referrer"}}),t._v(" "),e("h3",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),e("p",[t._v("以上就是 Vuex 模块化的内容，到这里关于 Vuex 的文章也告一段落。希望大家都能学到一点东西！")])])}),[],!1,null,null,null);e.default=r.exports}}]);