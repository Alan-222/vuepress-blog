(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{459:function(e,n,r){"use strict";r.r(n);var t=r(2),s=Object(t.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"前言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[e._v("#")]),e._v(" 前言")]),e._v(" "),n("p",[e._v("本系统后端的用户、角色、菜单模块已经基本完成了。但用户登录后还应获得此用户的基本信息、角色信息、菜单信息，只要前端请求头带上了 token，就能够根据此 token 获得此登录用户的 id，相应的获取这些信息也并不困难。除此之外，若是想要实现类似个人中心的效果，还需要能够修改已登录用户的信息包括头像，接下来我们就着手来实现。")]),e._v(" "),n("h2",{attrs:{id:"获取已登录用户的信息"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#获取已登录用户的信息"}},[e._v("#")]),e._v(" 获取已登录用户的信息")]),e._v(" "),n("p",[e._v("在前面的文章中，我们提到"),n("code",[e._v("express-jwt")]),e._v("这个中间件可以解析 token，经过它解析后的信息（为我们添加 token 时所设置的），通过"),n("code",[e._v("req.user")]),e._v("加相应字段名就可以访问到")]),e._v(" "),n("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0edb0a0b8ec24cf89b6ddebe999c5e0c~tplv-k3u1fbpfcp-watermark.image?",alt:"img.png",referrerpolicy:"no-referrer"}}),e._v(" "),n("p",[e._v("那我们通过"),n("code",[e._v("req.user.id")]),e._v("就可以访问到已登录用户的 id 了，接下来凭此 id 能够去获取此用户的其它信息。除了用户信息例如用户名、邮箱等这些可以直接从表中获取到，还有角色通过表的联结也可以获取，但菜单（不包括按钮）的信息就需要接口能够根据多个角色（一个用户可能是多角色，每个角色可能会有权限的重叠）查询到菜单的树状结构。")]),e._v(" "),n("p",[e._v("那么该如何实现呢？前提有"),n("code",[e._v("sequelize")]),e._v("能够通过数组查询数据库，我们先从角色权限表查询到传来的用户角色 id 数组中所有角色 id 的权限 id 将其转化为数组，将权限 id 数组去重。再在权限表查询这些权限 id 的菜单信息按照"),n("code",[e._v("type字段")]),e._v("去除按钮将剩下的菜单再转化为树状结构即可。接下来我们着手编写此方法。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 获取角色资源的方法\nconst getResource = async (role_id) => {\n  // 所有按钮的父id集合（重复）\n  let all_parent_ids = [];\n  // 所有按钮的父id（去除重复）\n  let parent_ids = [];\n  // 返回的按钮集合 按钮项格式为{menu_id:xx,btns:[xx,xx]}\n  const buttons = [];\n  // 获取角色菜单表中此角色id的所有记录\n  const roleResource = await RolesMenusModel.findAll({\n    where: { role_id: role_id }\n  });\n  // 获得此角色id的拥有权限id\n  let all_menu_ids = roleResource.map((resource) => {\n    return resource.menu_id;\n  });\n  // 将权限id数组去重\n  all_menu_ids = Array.from(new Set(all_menu_ids));\n  // 从菜单表获取此角色id拥有权限详细信息\n  const all_menus = await MenusModel.findAll({\n    where: { menu_id: all_menu_ids },\n    attributes: ['menu_id', 'parent_id', 'type', 'permission']\n  });\n  // 获取目录及菜单的id数组\n  const menu__arr = all_menus.filter((menu) => menu.type === 'M' || menu.type === 'C');\n  const menu_ids = menu__arr.map((menu) => menu.menu_id);\n  // 将获取的按钮数组转化为对应的格式\n  const btn_arr = all_menus.filter((menu) => menu.type === 'B');\n  btn_arr.forEach((button) => {\n    all_parent_ids.push(button.parent_id);\n  });\n  parent_ids = Array.from(new Set(all_parent_ids));\n  parent_ids.forEach((item) => {\n    buttons.push({ menu_id: item, btns: [] });\n  });\n  btn_arr.forEach((button) => {\n    parent_ids.forEach((parent) => {\n      if (button.parent_id === parent) {\n        buttons.forEach((item) => {\n          if (item.menu_id === parent) item.btns.push(button.permission);\n        });\n      }\n    });\n  });\n  return {\n    menu_ids,\n    buttons\n  };\n};\n")])])]),n("p",[e._v("通过这个方法，我们获取到了登录用户拥有角色的所有菜单 id 的数组和按钮数组，接下来再到菜单表查询出菜单信息即可。下面是完整的获取登录用户信息的接口（添加路由略）。")]),e._v(" "),n("p",[n("strong",[e._v("router_handler/userinfo.js")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 获取用户基本信息的处理函数\nexports.getUserinfo = async (req, res) => {\n  // 因为加入了expressJWT中间件解析token的原因，所以在请求头传递了token通过req.user.id就可访问到登录用户的id\n  const user_id = req.user.id;\n  // 查找已登录的用户详细信息\n  const user_roles = await UsersModel.findOne({\n    attributes: { exclude: ['password'] },\n    include: [{ model: RolesModel, attributes: ['role_id', 'role_name', 'status'] }],\n    where: {\n      user_id: user_id\n    }\n  });\n  // 若无用户信息提示错误\n  if (!user_roles) {\n    return res.send({\n      code: 1,\n      message: '帐号未分配角色',\n      data: ''\n    });\n  }\n  let role_ids = [];\n  let role_names = [];\n  // 获取该用户所拥有的角色\n  user_roles.roles.forEach(function (item) {\n    if (item.status) {\n      role_ids.push(item.role_id);\n      role_names.push(item.role_name);\n      // result = await getResource(item.role_id);\n      // menu_ids = result.menu_ids;\n      // buttons = result.buttons;\n    }\n  });\n  // 根据角色id数组获取权限\n  const resource = await getResource(role_ids);\n  // 根据菜单id数组获取菜单详细信息\n  const menus = await MenusModel.getListTree({ menu_id: resource.menu_ids });\n  return res.send({\n    code: 0,\n    message: '获取成功',\n    data: {\n      roles: role_names,\n      user_id: user_id,\n      name: user_roles.username,\n      nickname: user_roles.nickname,\n      email: user_roles.email,\n      avatar: user_roles.user_pic,\n      menus: menus,\n      buttons: resource.buttons\n    }\n  });\n};\n")])])]),n("h2",{attrs:{id:"修改已登录用户的信息"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#修改已登录用户的信息"}},[e._v("#")]),e._v(" 修改已登录用户的信息")]),e._v(" "),n("p",[e._v("修改用户信息不涉及角色权限的修改，比较容易实现，在此不再多做赘述。我们重点来看修改头像。")]),e._v(" "),n("p",[e._v("首先，我们通过接口传递图片信息，但是正常的通过"),n("code",[e._v("req.body")]),e._v("获取入参的手段对图片是不管用的，我们需要一个额外的中间件 formidable，让服务器得以解析获取图片。")]),e._v(" "),n("blockquote",[n("p",[e._v("formidable 的文档详见"),n("a",{attrs:{href:"https://npmmirror.com/package/formidable",target:"_blank",rel:"noopener noreferrer"}},[e._v("formidable"),n("OutboundLink")],1)])]),e._v(" "),n("p",[e._v("安装依赖")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("npm install formidable@2.0.1\n")])])]),n("p",[e._v("然后图片的话必须通过"),n("code",[e._v("form-data")]),e._v("的请求参数形式。然后通过"),n("code",[e._v("formidable")]),e._v("的生成对象解析图片存到我们的服务器路径即可，但解析出来的图片是以"),n("strong",[e._v("二进制")]),e._v("的形式传输，所以解析出来的图片没有后缀没有文件的名字。所以我们对解析出来的图片"),n("strong",[e._v("重命名")]),e._v("存储在服务器并"),n("strong",[e._v("暴露图片的静态资源目录")]),e._v("以便我们可以访问此服务器静态资源目录，再将存储的路径储存在数据库即可访问该图片。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 更新用户头像接口\nexports.updateAvatar = (req, res) => {\n  // 获取登录用户的id\n  let user_id = req.user.id;\n  let info = {};\n  // 初始化处理文件对象\n  let form = new formidable.IncomingForm();\n  form.uploadDir = './public/avatar'; // 指定解析对象（图片）存放的目录\n  form.keepExtensions = true; //保留后缀名\n​\n  form.parse(req, function (error, fields, files) {\n    if (error) {\n      info.code = 1;\n      info.message = '上传头像失败';\n      info.data = null;\n      res.send(info);\n    }\n    // fields 除了图片外的信息\n    // files 图片信息\n​\n    const generateFilename = (originalFilename, path) => {\n      let names = originalFilename.split('.');\n      path = path.replace('invalid-name', '');\n      return `${path}${names[0]}_${req.user.id}.${names[1]}`;\n    };\n​\n    // 通过fs更改文件名\n    const newFilePath = generateFilename(files.file.originalFilename, files.file.filepath);\n    fs.rename(files.file.filepath, newFilePath, (err) => {\n      if (err) {\n        console.log('重命名失败');\n        console.log(err);\n      } else {\n        console.log(\n          `已经保存为${generateFilename(files.file.newFilename, files.file.originalFilename, files.file.filepath)}`\n        );\n      }\n    });\n    const result = UsersModel.update(\n      { user_pic: newFilePath },\n      {\n        where: {\n          user_id: user_id\n        }\n      }\n    );\n    result.then(function (ret) {\n      if (ret) {\n        return res.send({\n          code: 0,\n          message: '重置头像成功',\n          data: {\n            srcUrl: newFilePath\n          }\n        });\n      } else {\n        return res.send({\n          code: 1,\n          message: ret,\n          data: null\n        });\n      }\n    });\n  });\n};\n")])])]),n("h2",{attrs:{id:"测试"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#测试"}},[e._v("#")]),e._v(" 测试")]),e._v(" "),n("p",[e._v("1.获取登录用户信息")]),e._v(" "),n("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3eb673e1d45746a9917ac04ee1d401c5~tplv-k3u1fbpfcp-watermark.image?",alt:"img.png",referrerpolicy:"no-referrer"}}),e._v(" "),n("p",[e._v("2.更新用户头像")]),e._v(" "),n("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c97f54cf83bb45e892d0fc94845d7964~tplv-k3u1fbpfcp-watermark.image?",alt:"img.png",referrerpolicy:"no-referrer"}}),e._v(" "),n("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e49f7f003c68478887d0659a4538b4fb~tplv-k3u1fbpfcp-watermark.image?",alt:"img.png",referrerpolicy:"no-referrer"}})])}),[],!1,null,null,null);n.default=s.exports}}]);