(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{462:function(t,e,r){"use strict";r.r(e);var n=r(2),s=Object(n.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/Alan-222/Vue3_Ts_NodeJs_management_system_server/blob/master/vue_ts-server/vue3%2Bts%2BnodeJS%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%EF%BC%88%E6%8E%A5%E5%8F%A3%E5%9C%B0%E5%9D%80%2B%E5%8F%82%E6%95%B0%EF%BC%89.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("接口文档"),e("OutboundLink")],1),t._v("有了，代理跨域、封装 axios 请求库的工作也做完了，接下来我们就可以对接口文档所提供的接口进行接口方法的封装，以便于调用接口。但首先我们得对请求参数的 ts 类型进行封装。")]),t._v(" "),e("h2",{attrs:{id:"封装接口参数的-ts-类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#封装接口参数的-ts-类型"}},[t._v("#")]),t._v(" 封装接口参数的 ts 类型")]),t._v(" "),e("p",[t._v("我们先根据接口文档提供的参数类型来封装 ts 类型。")]),t._v(" "),e("p",[t._v("在 src 文件夹下创建 types 文件夹，我们所有模块的 ts 类型声明都封装在这里，以.d.ts 文件形式存储。但还得配置 tsconfig.json 的 include 属性添加 types 文件夹里的.d.ts 文件，这样里面的 ts 类型声明才能被全局检测到。")]),t._v(" "),e("p",[e("strong",[t._v("tsconfig.json")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('{\n  "compilerOptions":{...},\n  "include": ["src/**/*.ts", "src/**/*.d.ts", "src/**/*.tsx", "src/**/*.vue"],\n}\n')])])]),e("p",[t._v("然后创建对应模块的.d.ts 文件")]),t._v(" "),e("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f8bca41a502446b6826414e236cc1895~tplv-k3u1fbpfcp-watermark.image?",alt:"img.png",referrerpolicy:"no-referrer"}}),t._v(" "),e("p",[t._v("以"),e("code",[t._v("user.d.ts")]),t._v("为例，我们进行封装。做法就是根据接口文档对应接口入参的类型进行一一对应就行")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("/**\n * 用户查询表单类型\n */\ndeclare interface userQueryParams {\n  currentPage: number; // 当前页\n  pageSize: number; // 每页条数\n  username?: string | undefined;\n  status?: number | undefined;\n}\n/**\n * 用户编辑表单类型\n */\ndeclare interface userEditForm {\n  user_id: number;\n  action: string;\n  username: string;\n  old_password: string;\n  password: string;\n  repassword: string;\n  status: number;\n  role_ids: any[];\n}\n")])])]),e("p",[t._v("其它模块的也与此类似")]),t._v(" "),e("h2",{attrs:{id:"封装接口方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#封装接口方法"}},[t._v("#")]),t._v(" 封装接口方法")]),t._v(" "),e("p",[t._v("在 axios 封装的配置文件中，我们可以得到一个 axios 对象的实例。导入此实例，再根据此实例添加"),e("code",[t._v("接口请求url、method、data（params）")]),t._v("就可以封装接口方法。之前初始化项目的时候我们已经在 utils 下创建了一个 api 文件夹，我们就在这里进行封装。")]),t._v(" "),e("ol",[e("li",[t._v("因为我们现在得接口都以 user 为前缀，所以我们在 api 文件夹下再创建一个 user 文件夹，然后根据模块再创建对应的 ts 文件")])]),t._v(" "),e("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/91c289020b6a48b0af6942fddadbac08~tplv-k3u1fbpfcp-watermark.image?",alt:"img.png",referrerpolicy:"no-referrer"}}),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[e("p",[t._v("接下来以 user 模块为例。我们先导入 axios 实例，根据此实例进行 axios 请求的封装")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 导入axios实例\nimport $http from '../../http';\n// 导入获取refreshToken的方法\nimport { getRefreshToken } from '@/utils/auth';\n// 获取图形验证码\nexport const getCheckCode = (uuid: number) => {\n  return $http({\n    url: '/user/checkCode?uuid=' + uuid,\n    method: 'get'\n  });\n};\n// 刷新过期token\nexport const refreshToken = () => {\n  return $http({\n    url: '/user/refreshToken',\n    method: 'post',\n    data: { refreshToken: getRefreshToken() }\n  });\n};\n// 添加用户登录请求 data如果约定好可以添加ts 接口类型\nexport const userLogin = (form: loginForm) => {\n  return $http({\n    url: '/user/login',\n    method: 'post',\n    data: form\n  });\n};\n​\nexport const listUser = (params: userQueryParams) => {\n  return $http({\n    url: '/user/list',\n    method: 'get',\n    params: params\n  });\n};\n​\nexport const addUser = (form: userEditForm) => {\n  return $http({\n    url: '/user/addUser',\n    method: 'post',\n    data: form\n  });\n};\n​\nexport const updateUser = (form: userEditForm) => {\n  return $http({\n    url: '/user/editUser/' + form.user_id,\n    method: 'post',\n    data: form\n  });\n};\n​\nexport const delUser = (ids: object) => {\n  return $http({\n    url: '/user/delUser',\n    method: 'post',\n    data: ids\n  });\n};\n​\nexport const updatePwd = (form: submitPass) => {\n  return $http({\n    url: `/user/editPwd`,\n    method: 'post',\n    data: form\n  });\n};\n// 根据id获取用户数据\nexport const getUserInfoById = (user_id: number) => {\n  return $http({\n    url: `/user/queryUserInfo/${user_id}`,\n    method: 'get'\n  });\n};\n")])])]),e("p",[t._v("其余模块也与此类似")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);