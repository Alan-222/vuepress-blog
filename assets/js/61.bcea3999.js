(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{468:function(e,r,s){"use strict";s.r(r);var t=s(2),n=Object(t.a)({},(function(){var e=this,r=e._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h2",{attrs:{id:"前言"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[e._v("#")]),e._v(" 前言")]),e._v(" "),r("p",[e._v("前面已经实现了登录所需的接口，接下来主要针对获取用户分页列表和修改用户接口进行说明，其它大同小异，实现逻辑与思路都差不多。但是首先，这些接口都是需要权限才能访问的，即请求头带上 token 访问，所以首先我们先要解析是否有 token。")]),e._v(" "),r("p",[r("strong",[e._v("获取用户分页列表")]),e._v("主要分以下几个步骤")]),e._v(" "),r("ol",[r("li",[e._v("获取前端给的分页参数（当前所处页数："),r("code",[e._v("currentPage")]),e._v("、页条数："),r("code",[e._v("pageSize")]),e._v("），还可能有对应的接口参数（例如："),r("code",[e._v("username")]),e._v("），这个时候就判断其有无再来决定要不要加到数据库查询参数中。")]),e._v(" "),r("li",[e._v("接下来就是用这些分页参数（比如第一页 5 条）、接口参数去查询数据库返回对应数据就行")])]),e._v(" "),r("p",[r("strong",[e._v("修改用户")]),e._v("接口就是")]),e._v(" "),r("ol",[r("li",[e._v("获取要查询参数 id（可通过 query、params 入参方式接收）和要修改的用户参数（body 接收）")]),e._v(" "),r("li",[e._v("根据 id 去到数据库中修改相应数据")])]),e._v(" "),r("h2",{attrs:{id:"解析接口的-token"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#解析接口的-token"}},[e._v("#")]),e._v(" 解析接口的 token")]),e._v(" "),r("p",[e._v("我们在"),r("a",{attrs:{href:"https://juejin.cn/post/7169399867184250893",target:"_blank",rel:"noopener noreferrer"}},[e._v("手把手教你实现一个 vue3+ts+nodeJS 后台管理系统（三）"),r("OutboundLink")],1),e._v("中有说到"),r("code",[e._v("express-jwt")]),e._v("库，这个库就是用来解析 token 的。我们只需要在"),r("code",[e._v("app.js")]),e._v("主文件中添加这个中间件即可实现 token 解析。但是切记要给他传递解析 token 的密钥。")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("...\n// 导入配置文件\nconst config = require('./config/index');\n// 解析 token 的中间件\nconst expressJWT = require('express-jwt');\n// 使用 .unless({ path: [/^/api//] }) 指定哪些接口不需要进行 Token 的身份认证\napp.use(\n  expressJWT({ secret: config.jwtSecretKey }).unless({ path: ['/user/login', '/user/checkCode', '/user/refreshToken'] })\n);\n...路由模块\n")])])]),r("p",[e._v("然后如果没有解析成功的访问，应当返回错误代码 401。所以我们要在路由之后捕获解析错误")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("...路由之后\n// 定义错误级别的中间件\napp.use((err, req, res, next) => {\n  // 数据验证失败\n  if (err instanceof joi.ValidationError) return res.send({ code: 1, message: err.message });\n  // token解析失败\n  if (err.name === 'UnauthorizedError') return res.send({ code: 401, message: '身份认证失败' });\n  // 未知错误\n  return res.send({ code: 500, message: err });\n});\n...\napp.listen(...)\n")])])]),r("h2",{attrs:{id:"获取用户列表"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#获取用户列表"}},[e._v("#")]),e._v(" 获取用户列表")]),e._v(" "),r("ol",[r("li",[r("p",[e._v("添加路由 "),r("strong",[e._v("router/user.js")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("// 获取用户列表\nrouter.get('/list', userHandler.getList);\n")])])])]),e._v(" "),r("li",[r("p",[e._v("校验分页参数")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("const pageSize = joi.number().required();\nconst currentPage = joi.number().required();\n​\n// 获取用户列表接口\nexports.get_list = joi.object().keys({\n  pageSize,\n  currentPage,\n  status\n});\n")])])])]),e._v(" "),r("li",[r("p",[e._v("获取分页参数和接口字段参数（可选） "),r("strong",[e._v("router_handler/user.js")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("// 导入校验规则\nconst { user_login_schema, add_user_schema, get_list} = require('../schema/user');\n...\nexports.getList = (req, res) => {\n  const { value, error } = get_list.validate(req.query);\n  if (error) throw error;\n  // 接收前端参数\n  let { pageSize, currentPage } = req.query;\n})\n")])])])]),e._v(" "),r("li",[r("p",[e._v("处理入参，若有接口字段的参数，拼接到 where 对象中")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("// 默认值\nlimit = pageSize ? Number(pageSize) : 10;\noffset = currentPage ? Number(currentPage) : 1;\noffset = (offset - 1) * pageSize;\nlet where = {};\nlet username = req.query.username;\nlet status = req.query.status;\nif (username) {\n  where.username = { [Op.like]: `%${username}%` };\n}\nif (status === 0 || status === 1) {\n  where.status = { [Op.eq]: status };\n}\n")])])])]),e._v(" "),r("li",[r("p",[e._v("查询数据库 这里我们用到的是"),r("a",{attrs:{href:"https://www.sequelize.cn/core-concepts/model-querying-finders",target:"_blank",rel:"noopener noreferrer"}},[r("code",[e._v("sequelize")]),e._v("库"),r("OutboundLink")],1),e._v("的"),r("code",[e._v("findAndCountAll")]),e._v("方法。接收 limit（页条数）和 offset（跳过的条数）。我们对之前接收到的参数做一些处理，然后用这个方法就可以实现。")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(" UsersModel.findAndCountAll({\n    attributes: { exclude: ['password'] },\n    offset: offset,\n    limit: limit,\n    where: where\n  }).then(function (users) {\n    return res.send({\n      code: 0,\n      message: '获取成功',\n      data: users\n    });\n  });\n")])])]),r("blockquote",[r("p",[e._v("对于 sequelize 库的操作有疑问的可以看我之前的文章"),r("a",{attrs:{href:"https://juejin.cn/post/7169129385864708103",target:"_blank",rel:"noopener noreferrer"}},[e._v("手把手教你实现一个 vue3+ts+nodeJS 后台管理系统（二）"),r("OutboundLink")],1)])])])]),e._v(" "),r("h2",{attrs:{id:"修改用户接口"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#修改用户接口"}},[e._v("#")]),e._v(" 修改用户接口")]),e._v(" "),r("ol",[r("li",[r("p",[e._v("添加接口\n"),r("strong",[e._v("router/user.js")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("// 修改用户信息\nrouter.post('/editUser/:id', userHandler.editUser);\n")])])])]),e._v(" "),r("li",[r("p",[e._v("校验入参 "),r("strong",[e._v("schema/user.js")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("// 用户名的校验规则\nconst username = joi.string().alphanum().min(1).max(10).required();\n// 密码的验证规则\nconst password = joi\n  .string()\n  .pattern(/^[\\S]{6,12}$/)\n  .required();\nconst checkCode = joi.string().alphanum().min(4).max(4).required();\nconst uuid = joi.number().required();\nconst nickname = joi.string();\nconst email = joi.string().email();\nconst status = joi.number().valid(0, 1);\n​\n// 更新用户接口\nexports.update_user_schema = joi.object().keys({\n  username,\n  status,\n  nickname,\n  email\n});\n")])])])]),e._v(" "),r("li",[r("p",[e._v("获取要修改的参数 id（以 params 参数为例），校验入参（要先引入入参规则） "),r("strong",[e._v("router_handler/user.js")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("//  导入需要的验证规则对象\nconst { user_login_schema, add_user_schema, get_list, update_user_schema } = require('../schema/user');\n...\nexports.editUser = (req, res) => {\n  const user_id = req.params.user_id;\n  const { value, error } = update_user_schema.validate(req.body);\n  if (error) throw error;\n  ...\n};\n")])])])]),e._v(" "),r("li",[r("p",[e._v("查询修改的用户名是否重复 这里我们引入"),r("a",{attrs:{href:"https://www.sequelize.cn/core-concepts/model-querying-basics",target:"_blank",rel:"noopener noreferrer"}},[e._v("sequelize 的 Op 模块"),r("OutboundLink")],1),e._v("，它可以用来执行一些 sql 操作，例如[Op.and]相当于数据库连接语句的 and，[Op.or]相当于 or 等")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("在文件开头引入 Op 模块")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("const { Op } = require('sequelize');\n")])])])]),e._v(" "),r("li",[r("p",[e._v("利用它来查询数据库，不重复则更新数据库")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("  UsersModel.findAll({\n    where: {\n      [Op.and]: {\n        user_id: {\n          [Op.ne]: user_id\n        },\n        username: {\n          [Op.eq]: value.username\n        }\n      }\n    }\n  }).then((result) => {\n    if (result && result.length)\n      return res.send({\n        code: 1,\n        message: '用户名被占用，请更换后重试！',\n        data: null\n      });\n    else {\n      const result = UsersModel.update(value, {\n        where: {\n          user_id: user_id\n        }\n      });\n      result.then(function (ret) {\n        if (ret) {\n          return res.send({\n            code: 0,\n            message: '修改成功',\n            data: ret\n          });\n        } else {\n          return res.send({\n            code: 1,\n            message: ret,\n            data: null\n          });\n        }\n      });\n    }\n  });\n")])])])])])])]),e._v(" "),r("h2",{attrs:{id:"测试"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#测试"}},[e._v("#")]),e._v(" 测试")]),e._v(" "),r("p",[e._v("1.不带 token 访问")]),e._v(" "),r("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a9e31703d91f4b0d955c0c213d83f87a~tplv-k3u1fbpfcp-watermark.image?",alt:"img.png",referrerpolicy:"no-referrer"}}),e._v(" "),r("p",[e._v("2.登录后带 token 访问")]),e._v(" "),r("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7d4a0997e7234f1f90937e17686be7fc~tplv-k3u1fbpfcp-watermark.image?",alt:"img.png",referrerpolicy:"no-referrer"}}),e._v(" "),r("p",[e._v("3.带上分页参数")]),e._v(" "),r("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3ea6229aa2114f139ba2c20519806a15~tplv-k3u1fbpfcp-watermark.image?",alt:"img.png",referrerpolicy:"no-referrer"}}),e._v(" "),r("p",[e._v("4.修改用户")]),e._v(" "),r("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/32634daf6ec34b1a86e8bd597a04b0e2~tplv-k3u1fbpfcp-watermark.image?",alt:"img.png",referrerpolicy:"no-referrer"}})])}),[],!1,null,null,null);r.default=n.exports}}]);