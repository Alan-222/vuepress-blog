(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{472:function(e,n,r){"use strict";r.r(n);var t=r(2),o=Object(t.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"前言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[e._v("#")]),e._v(" 前言")]),e._v(" "),n("p",[e._v("已经实现了 router、vuex 模块，并能够显示对应角色的权限菜单，接下来我们就完成登录模块看看实现的效果。但是之前的 layout 模块我们遍历的路由还是前端静态的路由，应该让他使用 vuex 中拼接后的路由，还有一些地方需要添加和修改（导航栏显示用户数据、重置密码模块、退出登录等）。")]),e._v(" "),n("h2",{attrs:{id:"修改-layout-模块"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#修改-layout-模块"}},[e._v("#")]),e._v(" 修改 layout 模块")]),e._v(" "),n("p",[e._v("我们导航栏用户信息操作的区域有一个重置密码的功能，主要步骤为需要"),n("strong",[e._v("弹窗")]),e._v("弹出表单、校验信息、提交表单，我们按步来实现。为了防止代码过多，我们将重置密码模块与主模块分开，由于重置密码的弹窗是显示在"),n("strong",[e._v("layout 主页面")]),e._v("（"),n("code",[e._v("index.vue")]),e._v("）上，所以弹窗的开关也得在主页面上，主页面只有弹窗。另外添加一个 form 表单文件（有旧密码、新密码、确认密码字段），主页面引入即可。我们先看看 layout 总体的目录结构")]),e._v(" "),n("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fc96c408c3064f328edaaaaf7cb98403~tplv-k3u1fbpfcp-watermark.image?",alt:"img.png",referrerpolicy:"no-referrer"}}),e._v(" "),n("h3",{attrs:{id:"添加重置密码模块"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#添加重置密码模块"}},[e._v("#")]),e._v(" 添加重置密码模块")]),e._v(" "),n("p",[n("strong",[e._v("components/layout/resetPassword.vue")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<template>\n  <div>\n    <el-form ref="ruleFormRef" :model="user" :rules="rules" label-width="80px">\n      <el-form-item label="旧密码" prop="oldPassword">\n        <el-input v-model="user.old_password" placeholder="请输入旧密码" type="password" />\n      </el-form-item>\n      <el-form-item label="新密码" prop="newPassword">\n        <el-input v-model="user.password" placeholder="请输入新密码" type="password" />\n      </el-form-item>\n      <el-form-item label="确认密码" prop="confirmPassword">\n        <el-input v-model="user.repassword" placeholder="请确认密码" type="password" />\n      </el-form-item>\n    </el-form>\n    <div slot="footer" class="dialog-footer">\n      <el-button @click="close(ruleFormRef)">取消</el-button>\n      <el-button type="primary" @click="submitForm(ruleFormRef)">保存</el-button>\n    </div>\n  </div>\n</template>\n​\n<script setup lang="ts">\nimport { ref, reactive } from \'vue\';\nimport { ElMessage, FormInstance } from \'element-plus\'\nimport { updatePwd } from \'@/utils/API/user/user\';\nimport { store } from \'@/store\';\nimport router from \'@/router\';\n// 引入弹窗关闭的方法\nconst emit = defineEmits([\'closeDialog\'])\n// 表单实例\nconst ruleFormRef = ref<FormInstance>()\n// 表单数据对象\nconst user = reactive<resetpass>({\n  old_password: \'\',\n  password: \'\',\n  repassword: \'\'\n})\n// 校验信息对象\nconst validatePass = (rule: any, value: any, callback: any) => {\n  if (value === \'\') {\n    callback(new Error(\'请输入新密码\'))\n  } else {\n    if (user.repassword !== \'\') {\n      if (!ruleFormRef.value) return\n      ruleFormRef.value.validateField(\'confirmPassword\', () => null)\n    }\n    callback()\n  }\n}\nconst validatePass2 = (rule: any, value: any, callback: any) => {\n  if (value === \'\') {\n    callback(new Error(\'请再次输入确认密码\'))\n  } else if (value !== user.password) {\n    callback(new Error("两次输入的密码不匹配！"))\n  } else {\n    callback()\n  }\n}\n// 校验规则\nconst rules = reactive({\n  old_password: [\n    { required: true, message: "旧密码不能为空", trigger: "blur" }\n  ],\n  password: [{ validator: validatePass, trigger: \'blur\' }],\n  repassword: [{ validator: validatePass2, trigger: \'blur\' }],\n})\n// 提交表单的方法\nconst submitForm = (formEl: FormInstance | undefined) => {\n  if (!formEl) return\n  formEl.validate((valid) => {\n    const form = {\n      user_id: store.state.user.user_id,\n      ...user\n    }\n    if (valid) {\n      updatePwd(form).then(res => {\n        ElMessage.success(\'重置密码成功\')\n        // 重置密码后重新登录\n        store.dispatch(\'user/FedLogOut\').then(() => {\n          router.push(\'/login\')\n        });\n        emit(\'closeDialog\')\n      })\n    }\n  })\n}\n// 关闭弹窗的方法\nconst close = (formEl: FormInstance | undefined) => {\n  // 清空弹窗\n  formEl?.resetFields()\n  emit(\'closeDialog\')\n}\n​\n<\/script>\n')])])]),n("p",[e._v("然后在主文件（"),n("code",[e._v("index.vue")]),e._v("）中添加一个弹窗内置此表单文件，再添加一个关闭弹窗的方法传递给表单组件即可。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<template>\n  <div class="app-container">\n    ...\n    <el-dialog v-model="dialogFormVisible" width="30%" title="重置密码">\n      <reset-password @closeDialog="closeDialog"></reset-password>\n    </el-dialog>\n  </div>\n</template>\n​\n<script setup lang="ts">\n...\nconst dialogFormVisible = ref(false)\n...\nconst closeDialog = () => {\n  dialogFormVisible.value = false\n}\n<\/script>\n')])])]),n("p",[e._v("导航栏显示用户数据及退出登录")]),e._v(" "),n("p",[n("strong",[e._v("index.vue html 结构")])]),e._v(" "),n("p",[e._v("主要就是利用 vuex 的全局状态显示用户信息")]),e._v(" "),n("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ee027c2cd7d94bb4851ce60f2a6c511e~tplv-k3u1fbpfcp-watermark.image?",alt:"img.png",referrerpolicy:"no-referrer"}}),e._v(" "),n("p",[n("strong",[e._v("index.vue js 代码")])]),e._v(" "),n("p",[e._v("退出登录方法主要是点击后显示确认框，确认后调用 vuex 中的异步函数，清空用户信息、token 等并重置路由然后跳转到登录页重新登录")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<script setup lang=\"ts\">\nimport { ref, computed } from 'vue'\nimport {\n  Tools,\n} from '@element-plus/icons-vue'\nimport { useStore } from '@/store';\nimport { useRouter } from 'vue-router'\nimport { ElMessageBox } from 'element-plus';\nimport ResetPassword from './resetPassword.vue';\nimport SidebarItem from './SidebarItem.vue';\n// 导入vuex模块\nconst store = useStore()\n// 导入router模块\nconst router = useRouter()\n// 获得用户权限菜单\nconst routes = computed(() => store.state.permission.routes);\n// 表单显示标识\nconst dialogFormVisible = ref(false)\n// 高亮的菜单项\nconst activeIndex = ref('1')\n// 退出登录的方法\nconst logout = () => {\n  ElMessageBox.confirm(\n    '确定注销并退出系统吗？',\n    '提示',\n    {\n      confirmButtonText: '确定',\n      cancelButtonText: '取消',\n      type: 'warning',\n    }\n  ).then(() => {\n    store.dispatch('user/FedLogOut').then(() => {\n      router.replace('/login')\n    })\n  })\n}\n// 关闭弹窗方法\nconst closeDialog = () => {\n  dialogFormVisible.value = false\n}\n<\/script>\n")])])]),n("p",[e._v("接下来我们来实现登录模块，就可看到主页的权限效果渲染正确与否")]),e._v(" "),n("h2",{attrs:{id:"实现登录模块"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实现登录模块"}},[e._v("#")]),e._v(" 实现登录模块")]),e._v(" "),n("p",[e._v("登录模块也比较简单，就是一个登录表单，涉及到表单校验、提交表单。还有一个记住密码的功能是需要安装额外的模块"),n("code",[e._v("js-cookie")]),e._v("（对 cookie 信息进行操作）、"),n("code",[e._v("jsencrypt")]),e._v("（对密码加密解密）。下面是依赖的版本。")]),e._v(" "),n("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a15a2fba7f434a1e90385429151ed38f~tplv-k3u1fbpfcp-watermark.image?",alt:"img.png",referrerpolicy:"no-referrer"}}),e._v(" "),n("p",[e._v("记住密码分两种情况")]),e._v(" "),n("ol",[n("li",[e._v("选择了记住密码。那么提交表单的方法我们就要存储用户名密码信息（密码需要用"),n("code",[e._v("jesncrypt")]),e._v("加密）到 cookie 中。下次再需要登录的时候直接先将密码解密再从 cookie 中取信息放到表单中")]),e._v(" "),n("li",[e._v("未选择记住密码就清空 cookie 中存在的用户名密码信息")])]),e._v(" "),n("p",[e._v("还有一个登录页面可能是其它页面（例如首页、用户管理等）重定向过来的，这时候会在 query 路由信息中有之前页面的地址还有其它 query 信息，我们监听此信息登录成功后跳转到此页面。接下来用代码看看总体的登录页面")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<template>\n  <div class=\"loginbody\">\n    <div class=\"logindata\">\n      <div class=\"logintext\">\n        <h2>Welcome</h2>\n      </div>\n      <div class=\"form\">\n        <el-form ref=\"ruleFormRef\" :model=\"form\" :rules=\"rules\">\n          <el-form-item prop=\"username\">\n            <el-input v-model=\"form.username\" clearable placeholder=\"请输入账号\"></el-input>\n          </el-form-item>\n          <el-form-item prop=\"password\">\n            <el-input v-model=\"form.password\" clearable placeholder=\"请输入密码\" show-password></el-input>\n          </el-form-item>\n          <el-form-item prop=\"checkCode\">\n            <el-input v-model=\"form.checkCode\" placeholder=\"请输入验证码\" class=\"login-code-input\" maxlength=\"4\" minlength=\"4\"\n              clearable></el-input>\n            <div class=\"login-code\" @click=\"getCode\" v-html=\"verifyImg\">\n            </div>\n          </el-form-item>\n          <el-form-item prop=\"remember\">\n            <el-checkbox v-model=\"form.remember\" class=\"check-box\">记住密码</el-checkbox>\n          </el-form-item>\n        </el-form>\n      </div>\n      <div class=\"butt\">\n        <el-button :loading=\"loading\" type=\"primary\" @click=\"submitForm(ruleFormRef)\">登录</el-button>\n        <el-button @click=\"ruleFormRef?.resetFields()\">重置</el-button>\n      </div>\n    </div>\n  </div>\n</template>\n​\n<script lang=\"ts\">\nexport default { name: 'Login' };\n<\/script>\n<script lang=\"ts\" setup>\nimport { ref, reactive, toRefs, watch, onMounted } from 'vue'\nimport router from '@/router'\nimport type { FormInstance, FormRules } from 'element-plus'\nimport { useStore } from '@/store'\nimport { useRoute } from 'vue-router'\nimport Cookies from 'js-cookie'\nimport { encrypt, decrypt } from '@/utils/jsencrypt'\nimport { getCheckCode } from '@/utils/API/user/user'\n​\n// 获取state、route\nconst store = useStore()\nconst route = useRoute()\n// 要重定向的地址\nconst redirect = ref(undefined as string | undefined)\n// 重定向路由其它query信息\nconst otherQuery = ref({})\n// 登录变量、方法\nconst loading = ref(false)\nconst ruleFormRef = ref<FormInstance>()\nconst form = reactive<loginForm>({\n  username: '',\n  password: '',\n  checkCode: '',\n  remember: false,\n  uuid: 0\n})\n// 验证码图片\nlet verifyImg = ref('')\nconst rules = reactive<FormRules>({\n  username: [{ required: true, message: '请输入账号', trigger: 'blur' }],\n  password: [{ required: true, message: '请输入密码', trigger: 'blur' }],\n  checkCode: [{ required: true, message: '请输入验证码', trigger: 'blur' }, { min: 4, max: 4, message: '长度为4个字符！', trigger: 'blur' }],\n})\nconst submitForm = (formEl: FormInstance | undefined) => {\n  if (!formEl) return\n  formEl.validate((valid, fields) => {\n    if (valid) {\n      loading.value = true\n      // 记住密码存储用户信息\n      if (form.remember) {\n        Cookies.set('username', form.username, { expires: 7 })\n        Cookies.set('password', encrypt(form.password), { expires: 7 })\n        Cookies.set('remember', form.remember, { expires: 7 })\n      } else {\n        // 移除用户信息\n        Cookies.remove('username')\n        Cookies.remove('password')\n        Cookies.remove('remember')\n      }\n      store.dispatch('user/login', form).then(() => {\n        router.push({ path: redirect.value || '/', query: otherQuery.value })\n        loading.value = false\n      })\n        .catch(() => {\n          getCode()\n          loading.value = false\n        })\n    }\n  })\n}\n// 监听重定向信息\nwatch(\n  route,\n  () => {\n    const query = route.query;\n    if (query) {\n      redirect.value = query.redirect as string;\n      otherQuery.value = getOtherQuery(query);\n    }\n  },\n  {\n    immediate: true\n  }\n);\n// 获取重定向query其它信息\nfunction getOtherQuery(query: any) {\n  return Object.keys(query).reduce((acc: any, cur: any) => {\n    if (cur !== 'redirect') {\n      acc[cur] = query[cur];\n    }\n    return acc;\n  }, {});\n}\n// 获取cookie中的用户名密码信息\nfunction getCookie() {\n  const username = Cookies.get('username')\n  const password = Cookies.get('password')\n  const remember = Cookies.get('remember')\n​\n  form.username = username === undefined ? form.username : username\n  form.password = password === undefined ? form.password : decrypt(password)\n  form.remember = remember === undefined ? form.remember : Boolean(remember)\n}\n// 获取验证码\nfunction getCode() {\n  const uuid = new Date().getTime()\n  form.uuid = uuid\n  getCheckCode(uuid).then(res => {\n    verifyImg.value = res.data\n  })\n}\nonMounted(() => {\n  getCode()\n  getCookie()\n})\n<\/script>\n​\n<style lang=\"scss\" scoped>\n.loginbody {\n  width: 100%;\n  height: 100%;\n  background-image: url('../assets/images/cool-background.png');\n  background-size: cover;\n  background-repeat: no-repeat;\n  position: fixed;\n  opacity: 0.8;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n​\n.logintext {\n  margin-bottom: 20px;\n  line-height: 50px;\n  text-align: center;\n  font-size: 30px;\n  font-weight: bolder;\n  color: #fbffc8;\n  text-shadow: 2px 2px 4px #000000;\n}\n​\n.logindata {\n  width: 400px;\n  height: 300px;\n  margin-bottom: 150px;\n}\n​\n.form {\n  width: 100%;\n​\n  .el-input {\n    font-size: 16px;\n    width: 100%;\n    height: 40px;\n    line-height: 40px;\n  }\n​\n  .login-code-input {\n    position: relative;\n  }\n​\n  .login-code {\n    position: absolute;\n    right: 6px;\n    top: 4px;\n    vertical-align: center;\n    width: 100px;\n    height: 32px;\n    cursor: pointer;\n    vertical-align: middle;\n​\n  }\n​\n  .check-box {\n    font-size: 16px;\n    font-weight: 600\n  }\n}\n​\n.tool {\n  display: flex;\n  justify-content: space-between;\n  color: #606266;\n}\n​\n.butt {\n  font-size: 16px;\n  margin-top: 10px;\n  text-align: center;\n}\n​\n.shou {\n  cursor: pointer;\n  color: #606266;\n}\n</style>\n")])])]),n("h2",{attrs:{id:"测试"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#测试"}},[e._v("#")]),e._v(" 测试")]),e._v(" "),n("ol",[n("li",[e._v("登录成功展示对应权限菜单")])]),e._v(" "),n("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e01c151ee52c44f1bb66b52cb7b71028~tplv-k3u1fbpfcp-watermark.image?",alt:"img.png",referrerpolicy:"no-referrer"}}),e._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[e._v("登录失败")])]),e._v(" "),n("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c9ee8cf0f47d4113b52e7d8bff81ad1a~tplv-k3u1fbpfcp-watermark.image?",alt:"img.png",referrerpolicy:"no-referrer"}})])}),[],!1,null,null,null);n.default=o.exports}}]);