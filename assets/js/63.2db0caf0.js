(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{469:function(e,n,t){"use strict";t.r(n);var s=t(2),r=Object(s.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"前言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[e._v("#")]),e._v(" 前言")]),e._v(" "),n("p",[e._v("在上文中我们完成了后端项目的数据库的创建和映射。接下来我们将编写用户路由（接口）。但首先要先有 token 模块（生成与解析）、图形验证码模块（返回前端及验证图形验证码）、输入信息校验。本文先完成 token 模块及校验信息模块。")]),e._v(" "),n("h2",{attrs:{id:"登录路由实现的准备"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#登录路由实现的准备"}},[e._v("#")]),e._v(" 登录路由实现的准备")]),e._v(" "),n("h3",{attrs:{id:"校验输入参数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#校验输入参数"}},[e._v("#")]),e._v(" 校验输入参数")]),e._v(" "),n("p",[e._v("校验入参需要用到的依赖是"),n("code",[e._v("joi")]),e._v("，首先要安装依赖")]),e._v(" "),n("h4",{attrs:{id:"安装所需依赖"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#安装所需依赖"}},[e._v("#")]),e._v(" 安装所需依赖")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 验证与解析规则\nnpm install joi@17.6.0\n")])])]),n("h4",{attrs:{id:"验证规则模块"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#验证规则模块"}},[e._v("#")]),e._v(" 验证规则模块")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("在根目录创建 schema 文件夹")])]),e._v(" "),n("li",[n("p",[e._v("schema 下创建 user.js 文件")])]),e._v(" "),n("li",[n("p",[e._v("导入 joi 模块")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const joi=require('joi')\n")])])])]),e._v(" "),n("li",[n("p",[e._v("编写字段对应的校验规则，例如")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 用户名的校验规则，代表必须的最小1位最大10位包含a-zA-Z0-9的字符串\nconst username = joi.string().alphanum().min(1).max(10).required();\n")])])])]),e._v(" "),n("li",[n("p",[e._v("完成所需字段规则的编写")]),e._v(" "),n("p",[n("strong",[e._v("schema/user.js")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("let joi = require('joi');\n// 允许未设置规则的未知键\njoi = joi.defaults((schema) =>\n  schema.options({\n    allowUnknown: true\n  })\n);\n/**\n * string() 值必须是字符串\n * alphanum() 值只能是包含 a-zA-Z0-9 的字符串\n * min(length) 最小长度\n * max(length) 最大长度\n * required() 值是必填项，不能为 undefined\n * pattern(正则表达式) 值必须符合正则表达式的规则\n */\n// 用户名的校验规则\nconst username = joi.string().alphanum().min(1).max(10).required();\n// 密码的验证规则\nconst password = joi\n  .string()\n  .pattern(/^[\\S]{6,12}$/)\n  .required();\nconst checkCode = joi.string().alphanum().min(4).max(4).required();\nconst uuid = joi.number().required();\n​\n// 登录表单的验证规则对象\nexports.user_login_schema = joi.object().keys({\n  username,\n  password,\n  checkCode,\n  uuid\n});\n")])])])]),e._v(" "),n("li",[n("p",[e._v("添加捕获验证错误的全局中间件")]),e._v(" "),n("p",[n("strong",[e._v("app.js")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("...\n// 此段代码要放置在路由之后才可捕获到错误\n// 导入验证规则中间件\nconst joi = require('joi');\n// 定义错误级别的中间件\napp.use((err, req, res, next) => {\n  // 数据验证失败\n  if (err instanceof joi.ValidationError) return res.send({ code: 1, message: err.message });\n  // 未知错误\n  return res.send({ code: 500, message: err });\n});\n// 启动服务器\napp.listen(...)\n```\n")])])])])]),e._v(" "),n("h3",{attrs:{id:"登录令牌的实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#登录令牌的实现"}},[e._v("#")]),e._v(" 登录令牌的实现")]),e._v(" "),n("h4",{attrs:{id:"安装所需依赖-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#安装所需依赖-2"}},[e._v("#")]),e._v(" 安装所需依赖")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 用户权限验证，token的生成\nnpm install jsonwebtoken@8.5.1\n// 解析token\nnpm install express-jwt@5.3.3\n")])])]),n("h4",{attrs:{id:"token-生成及验证模块"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#token-生成及验证模块"}},[e._v("#")]),e._v(" token 生成及验证模块")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("在根目录创建 utils 文件夹（用来存放一些工具方法）")])]),e._v(" "),n("li",[n("p",[e._v("utils 下创建 token.js 文件")])]),e._v(" "),n("li",[n("p",[e._v("在根目录创建 config 文件夹（存放一些配置信息）")]),e._v(" "),n("ul",[n("li",[e._v("创建 index.js 文件存储配置信息")])]),e._v(" "),n("p",[e._v("配置信息主要是 access_token、refresh_token 的密钥及过期时间，如以下")]),e._v(" "),n("p",[n("strong",[e._v("config/index.js")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("module.exports={\n   // token密钥\n  jwtSecretKey: 'you are the best!',\n  jwtRefrechSecretKey: 'be a better one!',\n  secretKeyExpire: 60 * 60 * 2,   // 2小时\n  refreshSerectKeyExpire: 60 * 60 * 24 * 2  //2天\n}\n")])])])]),e._v(" "),n("li",[n("p",[e._v("utils 下 token.js 进行 token 的生成")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("导入"),n("code",[e._v("jsonwebtoken")]),e._v("模块")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const jwt = require('jsonwebtoken');\n")])])])]),e._v(" "),n("li",[n("p",[e._v("导入密钥")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const tkconf = require('../config/index');\n")])])])]),e._v(" "),n("li",[n("p",[e._v("编写 token 工具函数并导出，包括生成 token、解析 token 以及验证 refreshToken")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("/**\n * token生成函数\n * @param {*} user 存在token中的信息\n * @param {*} serect 密钥\n * @param {*} time  token存在时间\n * @returns\n */\nconst addToken = function (user, serect, time) {\n  //创建token并导出\n​\n  const token = jwt.sign(\n    {\n      id: user.id,\n      username: user.username\n    },\n    serect,\n    { expiresIn: time + 's' }\n  );\n  return token;\n};\n/**\n * token解析函数\n * @param {*} token\n * @returns\n */\nconst decodedToken = function (token) {\n  const decoded = jwt.decode(token);\n  return decoded;\n};\n/**\n * 验证对应的refreshToken\n * @param {*} refreshToken\n * @returns\n */\nconst verifyToken = function verify_refreshToken(refreshToken) {\n  return jwt.verify(refreshToken, tkconf.jwtRefrechSecretKey, (err, decode) => {\n    return err ? err : 1;\n  });\n};\n​\nmodule.exports = {\n  addToken,\n  decodedToken,\n  verifyToken\n};\n")])])])])])])])])}),[],!1,null,null,null);n.default=r.exports}}]);