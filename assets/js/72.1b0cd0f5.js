(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{476:function(e,r,n){"use strict";n.r(r);var t=n(2),s=Object(t.a)({},(function(){var e=this,r=e._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h2",{attrs:{id:"前言"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[e._v("#")]),e._v(" 前言")]),e._v(" "),r("p",[e._v("改造完用户接口后，我们继续来进行角色模块的接口编写。大体上需要的接口有增删改查角色、获取角色列表等。其中会与用户角色表有关联的接口只有删除角色接口，其它增改查不涉及对角色 id 的修改。所以我们本文着重来写一下增、删角色接口，其它与用户模块的接口大同小异，大家可以参考着写。")]),e._v(" "),r("h2",{attrs:{id:"添加角色接口"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#添加角色接口"}},[e._v("#")]),e._v(" 添加角色接口")]),e._v(" "),r("p",[e._v("添加角色的接口逻辑比较简单。还是校验入参然后数据入库的流程。")]),e._v(" "),r("h3",{attrs:{id:"校验入参规则"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#校验入参规则"}},[e._v("#")]),e._v(" 校验入参规则")]),e._v(" "),r("p",[r("strong",[e._v("schema/role.js")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("const joi = require('joi');\n/**\n * string() 值必须是字符串\n * alphanum() 值只能是包含 a-zA-Z0-9 的字符串\n * min(length) 最小长度\n * max(length) 最大长度\n * required() 值是必填项，不能为 undefined\n * pattern(正则表达式) 值必须符合正则表达式的规则\n */\n// 角色名的校验规则\nconst role_name = joi.string().min(1).max(10).required();\n// 定义 id, nickname, emial 的验证规则\nconst role_id = joi.number().integer().min(0).required();\nconst remark = joi.string();\nconst status = joi.number().valid(0, 1);\n// 角色id数组\nconst role_ids = joi.array().items(joi.number()).required();\n// 分页参数\nconst pageSize = joi.number().required();\nconst currentPage = joi.number().required();\n​\n// 添加角色的验证规则对象\nexports.add_role_schema = joi.object().keys({\n  // 对res.body对象进行验证\n  role_name,\n  remark,\n  status\n});\n// 获取角色列表的验证规则对象\nexports.get_role_list_schema = joi.object().keys({\n  pageSize,\n  currentPage,\n  role_name: joi.string().min(1).max(10)\n});\n// 修改角色的验证规则对象\nexports.edit_role_schema = joi.object().keys({\n  role_name,\n  remark,\n  status\n});\n// 删除角色的验证规则对象\nexports.delete_role_schema = joi.object().keys({\n  role_ids\n});\n// 获取单角色的验证规则对象\nexports.get_role_schema = joi.object().keys({\n  // 对query参数进行验证\n  role_id\n});\n")])])]),r("h3",{attrs:{id:"路由"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#路由"}},[e._v("#")]),e._v(" 路由")]),e._v(" "),r("p",[r("strong",[e._v("router/role.js")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("const express = require('express');\n// 创建路由对象\nconst router = express.Router();\nconst roleHandler = require('../router_handler/role');\n​\n// 添加角色\nrouter.post('/addRole', roleHandler.addRole);\n")])])]),r("p",[r("strong",[e._v("路由回调")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("const RoleModel = require('../model/roles');\n// 导入需要的验证规则对象\nconst {\n  get_role_list_schema,\n  add_role_schema,\n  edit_role_schema,\n  delete_role_schema,\n  get_role_schema\n} = require('../schema/role');\n​\n// 添加角色接口\nexports.addRole = (req, res) => {\n  const { value, error } = add_role_schema.validate(req.body);\n  if (error) throw error;\n  RoleModel.create(value).then(function (role) {\n    if (!role) {\n      return res.send({\n        code: 1,\n        message: '创建失败',\n        data: null\n      });\n    }\n    return res.send({\n      code: 0,\n      message: '创建成功',\n      data: role\n    });\n  });\n};\n")])])]),r("h2",{attrs:{id:"删除角色接口"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#删除角色接口"}},[e._v("#")]),e._v(" 删除角色接口")]),e._v(" "),r("p",[e._v("删除角色的接口的实现步骤如下：")]),e._v(" "),r("ol",[r("li",[e._v("校验是否有角色 id 数组")]),e._v(" "),r("li",[e._v("获取要删除的角色 id 数组")]),e._v(" "),r("li",[e._v("删除对应角色表中角色 id 数组的角色 id")]),e._v(" "),r("li",[e._v("对用户角色表中的含角色 id 的记录进行删除")])]),e._v(" "),r("p",[e._v("所以我们先在角色模型中定义好删除的方法，再进行路由的编写。")]),e._v(" "),r("p",[r("strong",[e._v("model/role.js")])]),e._v(" "),r("p",[e._v("这里我们还是采用事务的写法，有异常即回滚。")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("const UsersRolesModel = require('./users-roles');\n...\nconst RolesModel=sequelize.define(...)\n// 删除角色的方法\nRolesModel.delRole = async function (role_ids) {\n  const t = await sequelize.transaction();\n  try {\n    // 删除角色表中角色id数组的角色\n    await RolesModel.destroy({\n      where: { role_id: role_ids }\n    });\n    // 删除用户角色表中角色id数组的角色记录\n    await UsersRolesModel.destroy({\n      where: { role_id: role_ids }\n    });\n    t.commit();\n    return true;\n  } catch (e) {\n    t.rollback();\n    return false;\n  }\n};\n...\n")])])]),r("h3",{attrs:{id:"路由-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#路由-2"}},[e._v("#")]),e._v(" 路由")]),e._v(" "),r("p",[r("strong",[e._v("router/role.js")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("// 删除角色\nrouter.post('/delRole', roleHandler.deleteRole);\n")])])]),r("h3",{attrs:{id:"路由回调"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#路由回调"}},[e._v("#")]),e._v(" "),r("strong",[e._v("路由回调")])]),e._v(" "),r("p",[r("strong",[e._v("router_handler/role.js")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("// 删除角色接口\nexports.deleteRole = (req, res) => {\n  const { value, error } = delete_role_schema.validate(req.body);\n  if (error) throw error;\n  const role_ids = value.role_ids;\n  // 对应角色id数组进行删除\n  RoleModel.delRole(role_ids || []).then(function (role) {\n    if (role !== true) {\n      return res.send({\n        code: 1,\n        message: '删除失败',\n        data: null\n      });\n    }\n    return res.send({\n      code: 0,\n      message: '删除成功',\n      data: role\n    });\n  });\n};\n")])])]),r("h2",{attrs:{id:"测试"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#测试"}},[e._v("#")]),e._v(" 测试")]),e._v(" "),r("ol",[r("li",[r("p",[e._v("在主文件中添加角色模块 "),r("strong",[e._v("app.js")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("...\napp.use('/user',userRouter)\n// 导入并注册用户角色模块\nconst roleRouter = require('./router/role');\napp.use('/user/role', roleRouter);\n...\n")])])])]),e._v(" "),r("li",[r("p",[e._v("添加角色路由测试")])])]),e._v(" "),r("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a1eec9e16ad44cd29293e2bf7054e5cb~tplv-k3u1fbpfcp-watermark.image?",alt:"img.png",referrerpolicy:"no-referrer"}}),e._v(" "),r("ol",{attrs:{start:"3"}},[r("li",[e._v("删除角色路由测试")])]),e._v(" "),r("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8da8ffbe1e884d459825fcdb3a6f2956~tplv-k3u1fbpfcp-watermark.image?",alt:"img.png",referrerpolicy:"no-referrer"}}),e._v(" "),r("p",[e._v("那么我们角色模块到这里就完成了，剩下的接口大家可以自行对应用户模块的写法自行完成。最后附上所有路由。")]),e._v(" "),r("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0c948a4fb089439fad466e9db622eceb~tplv-k3u1fbpfcp-watermark.image?",alt:"img.png",referrerpolicy:"no-referrer"}})])}),[],!1,null,null,null);r.default=s.exports}}]);