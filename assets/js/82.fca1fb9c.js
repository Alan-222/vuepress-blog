(window.webpackJsonp=window.webpackJsonp||[]).push([[82],{489:function(e,t,a){"use strict";a.r(t);var n=a(2),s=Object(n.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"前言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[e._v("#")]),e._v(" 前言")]),e._v(" "),t("p",[e._v("完成了 Layout 模块页面布局后，我们就可以着手内容页面的构建。对于后台管理系统而言，通用的模块可以分为以下几块")]),e._v(" "),t("p",[e._v("1.搜索查询模块")]),e._v(" "),t("p",[e._v("2.功能按钮模块")]),e._v(" "),t("p",[e._v("3.列表模块")]),e._v(" "),t("p",[e._v("我们对以上三个模块分开进行介绍。")]),e._v(" "),t("h2",{attrs:{id:"管理页面通用模块"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#管理页面通用模块"}},[e._v("#")]),e._v(" 管理页面通用模块")]),e._v(" "),t("h3",{attrs:{id:"搜索查询模块"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#搜索查询模块"}},[e._v("#")]),e._v(" 搜索查询模块")]),e._v(" "),t("p",[e._v("搜索模块由一或多个 form 表单搜索项和搜索、重置按钮组成。")]),e._v(" "),t("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/812c2b96017a40d4aee3ec2ac97eb00c~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=2257&h=415&s=16735&e=png&b=f9f9f9",alt:"img.png",referrerpolicy:"no-referrer"}}),e._v(" "),t("p",[e._v("当表单项超出三项时，点击高级搜索查看编辑剩余的搜索项。")]),e._v(" "),t("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/da1010c1242148098cf58a1d2332cee1~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=2256&h=618&s=23649&e=png&b=fafafa",alt:"img.png",referrerpolicy:"no-referrer"}}),e._v(" "),t("p",[e._v("我们可以额外封装一个"),t("strong",[e._v("搜索栏组件")]),e._v("来处理，总共有以下几个步骤")]),e._v(" "),t("h4",{attrs:{id:"_1-父组件传入搜索项数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-父组件传入搜索项数组"}},[e._v("#")]),e._v(" 1.父组件传入搜索项数组")]),e._v(" "),t("p",[e._v("我们传递一个数组到搜索栏组件中，数组每项传递")]),e._v(" "),t("ul",[t("li",[t("p",[t("code",[e._v("formItemProps")]),e._v("：为对象，里面包含")]),e._v(" "),t("ul",[t("li",[e._v("表单项的字段名"),t("code",[e._v("name")]),e._v("（必填）")]),e._v(" "),t("li",[e._v("表单项的标签名"),t("code",[e._v("label")]),e._v("（必填）")]),e._v(" "),t("li",[e._v("其它你想要透传给"),t("code",[e._v("Form.item")]),e._v("组件的属性")])])]),e._v(" "),t("li",[t("p",[t("code",[e._v("valueCompProps")]),e._v("：为对象，里面包含（皆非必填）")]),e._v(" "),t("ul",[t("li",[e._v("输入框组件的类型"),t("code",[e._v("type")]),e._v("，不填为 input")]),e._v(" "),t("li",[e._v("select 组件的选项数组"),t("code",[e._v("selectValues")])]),e._v(" "),t("li",[e._v("输入类组件"),t("code",[e._v("onChange")]),e._v("事件的回调函数"),t("code",[e._v("callback")])]),e._v(" "),t("li",[e._v("其它你想透传给输入类组件的属性")])])])]),e._v(" "),t("p",[e._v("例如用户管理需要用户名、昵称、邮箱、状态的搜索项。除了状态为 Select 下拉框组件，其它皆为 Input 输入框，数组便如下所示")]),e._v(" "),t("p",[t("strong",[e._v("src/pages/System/User/index.jsx")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 导入获取字典hook\nimport useDict from '@/hooks/useDict'\n...\n// 状态字典\nconst statusDict = useDict('status')\n// 搜索栏表单项数组\nconst formItemList = [\n{ formItemProps: { name: 'username', label: '用户名' }, valueCompProps: {} },\n{ formItemProps: { name: 'nickname', label: '昵称' }, valueCompProps: {} },\n{ formItemProps: { name: 'email', label: '邮箱' }, valueCompProps: {} },\n{\n  formItemProps: { name: 'status', label: '状态' },\n  valueCompProps: { type: 'select', selectValues: statusDict }\n}]\n")])])]),t("p",[e._v("我们可以发现用到了"),t("code",[e._v("useDict")]),e._v("这个"),t("code",[e._v("自定义hook")]),e._v("，其作用就是返回指定字典名称的字典值。")]),e._v(" "),t("h4",{attrs:{id:"_2-自定义-hook-获取字典值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-自定义-hook-获取字典值"}},[e._v("#")]),e._v(" 2.自定义 hook 获取字典值")]),e._v(" "),t("p",[t("code",[e._v("自定义hook")]),e._v("其实就是一个处理函数，往里传入参数，返回需要的结果。我们在 src 下新加一个"),t("code",[e._v("hook")]),e._v("文件夹，并且新建"),t("code",[e._v("useDict.js")]),e._v("文件。之后的步骤如以下：")]),e._v(" "),t("ul",[t("li",[e._v("获取传入的字典名称")]),e._v(" "),t("li",[e._v("调用接口获取此字典名称的字典值")]),e._v(" "),t("li",[e._v("将字典值转换为需要的"),t("code",[e._v("{label,value}")]),e._v("格式返回")])]),e._v(" "),t("p",[t("strong",[e._v("src/hook/useDict.js")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("import { useState, useEffect } from 'react'\nimport dictApi from '@/api/dict'\n// 自定义Hook，用于获取字典数据\nconst useDict = (dictName) => {\n  const [dictionary, setDictionary] = useState([])\n​\n  useEffect(() => {\n    const fetchDictionary = async () => {\n      // 调用接口获取字典值\n      const { data } = await dictApi.manage.queryByName(dictName)\n      const options = data.map((item) => {\n        return { label: item.item_text, value: item.item_value }\n      })\n      setDictionary(options)\n    }\n​\n    fetchDictionary()\n  }, [dictName])\n​\n  return dictionary\n}\nexport default useDict\n")])])]),t("h4",{attrs:{id:"_3-封装搜索栏组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-封装搜索栏组件"}},[e._v("#")]),e._v(" 3.封装搜索栏组件")]),e._v(" "),t("p",[e._v("（1）构建基本框架")]),e._v(" "),t("p",[e._v("外围框架直接用"),t("code",[e._v("antd")]),e._v("的 Card 组件，内部为表单组件。表单项采用 Row、Col 构建栅格布局")]),e._v(" "),t("p",[t("strong",[e._v("src/components/SearchBar/index.jsx")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("import React from 'react'\nimport { Card, Form, Row } from 'antd'\n​\nconst SearchBar = ({ formItemList }) => {\n  // form 表单实例\n  const [form] = Form.useForm()\n  const onFinish = (values) => {\n    console.log(values)\n  }\n​\n  return (\n    <Card>\n      <Form\n        form={form}\n        name=\"queryForm\"\n        labelCol={{ span: 6 }}\n        wrapperCol={{ span: 18 }}\n        layout=\"inline\"\n        onFinish={onFinish}>\n        <Row justify=\"start\" gutter={[20, 20]} style={{ width: '100%' }}></Row>\n      </Form>\n    </Card>\n  )\n}\n​\nexport default SearchBar\n")])])]),t("p",[e._v("（2）搜索项数量大于等于三和小于三的处理")]),e._v(" "),t("p",[t("strong",[e._v("搜索查询模块")]),e._v("最开始的图片所展示的即是经过处理的效果。")]),e._v(" "),t("ul",[t("li",[e._v("当搜索项数量小于等于三，直接展示全部搜索项")]),e._v(" "),t("li",[e._v("当搜索项数量大于 3，默认先展示前三项，点击高级搜索后展示剩余项")])]),e._v(" "),t("p",[e._v("我们获取数组后直接将数组用 slice 方法分块，[0,3)和[3,length-1]。我们先来处理默认展示的[0,3)")]),e._v(" "),t("p",[e._v("为了实现栅格布局，在 Row 标签内每个子项都得带有 Col 组件。然后 Col 组件包裹着"),t("code",[e._v("Form.Item")]),e._v("组件，"),t("code",[e._v("Form.Item")]),e._v("组件包裹输入类组件。"),t("strong",[e._v("输入类组件的类型")]),e._v("为父组件传入的，得根据传入的类型返回不同的组件。由此我们构建一个对象，每个属性的键为输入类组件的类型；值为函数，函数参数为外部传入，返回值为输入类组件。具体如下代码（目前只封装三个组件，大家可以依此扩展）")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// 表单输入式组件\n  const formComponents = {\n    select: ({ type, selectvalues = [], callback = () => {}, ...restProps }) =>\n      createElement(\n        Select,\n        { onChange: (v) => callback(v), ...restProps },\n        selectvalues.map((v) => createElement(Select.Option, { key: v.value, value: v.value }, v.label))\n      ),\n    input: ({ type, ...restProps }) => <Input {...restProps} />,\n    datePicker: ({ type, ...restProps }) => <DatePicker format="YYYY-MM-DD" {...restProps} />\n  }\n')])])]),t("p",[e._v("依据类型封装完组件后，将外部参数参数传入后面再添加上搜索和重置按钮即可。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('...\n<Row justify="start" gutter={[20, 20]} style={{ width: \'100%\' }}>\n   {formItemList &&\n    formItemList.slice(0, 3).map((item, index) => {\n      // 取出输入类组件的类型，无则默认input\n      const { type = \'input\' } = item.valueCompProps\n      // 依据类型返回对应的组件\n      const C = formComponents[type]\n      // 输出不用的type属性以便传入输入类组件\n      delete item.valueCompProps.type\n      return (\n        <Col span={6} key={index}>\n          <Form.Item {...item.formItemProps}>{C(item.valueCompProps)}</Form.Item>\n        </Col>\n      )\n    })}\n  {formItemList && (\n    <Col span={6}>\n      <Form.Item wrapperCol={{ span: 12, offset: 6 }}>\n        <Space>\n          <Button type="primary" htmlType="submit">\n            查询\n          </Button>\n          <Button onClick={onReset}>重置</Button>\n        </Space>\n      </Form.Item>\n    </Col>\n  )}\n</Row>\n...\n')])])]),t("p",[e._v("然后当搜索项数量大于三的时候，我们在搜索和重置按钮后多展示一个高级搜索按钮，点击后展示剩余的搜索项（即数组的[3,length-1]）。")]),e._v(" "),t("p",[t("strong",[e._v("增加的按钮")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('   // 是否展开高级搜索\n   const [advancedSearch, setAdvancedSearch] = useState(false)\n   ...\n   <Button onClick={onReset}>重置</Button>\n   {formItemList.length > 3 && (\n        <Button\n          type="link"\n          icon={<PlusCircleOutlined />}\n          onClick={() => setAdvancedSearch((value) => !value)}>\n          高级搜索\n        </Button>\n   )}\n </Space>\n')])])]),t("p",[t("strong",[e._v("剩余的数组项")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("{advancedSearch &&\n    formItemList.length > 3 &&\n    formItemList.slice(3).map((item, index) => {\n      const { type = 'input' } = item.valueCompProps\n      const C = formComponents[type]\n      return (\n        <Col span={6} key={3 + index}>\n          <Form.Item {...item.formItemProps}>{C(item.valueCompProps)}</Form.Item>\n        </Col>\n      )\n})}\n")])])]),t("p",[e._v("最后我们编写"),t("strong",[e._v("搜索重置")]),e._v("按钮的事件")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// form 表单实例\nconst [form] = Form.useForm()\nconst [advancedSearch, setAdvancedSearch] = useState(false)\nconst onFinish = (values) => {\n  // 接收并调用父组件的获取表单值方法\n  getSearchParams(values)\n}\nconst onReset = () => {\n  form.resetFields()\n  getSearchParams({})\n}\n")])])]),t("h4",{attrs:{id:"_4-父组件引用搜索栏组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-父组件引用搜索栏组件"}},[e._v("#")]),e._v(" 4.父组件引用搜索栏组件")]),e._v(" "),t("p",[t("strong",[e._v("src/pages/System/User/index.jsx")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 搜索请求参数\nconst [searchParams, setSearchParams] = useState([])\n// 获取搜索栏组件的表单参数\nconst getSearchParams = (searchParams) => {\n  setSearchParams(searchParams)\n}\n...\nreturn(\n  <>\n    <SearchBar formItemList={formItemList} getSearchParams={getSearchParams} />\n  </>\n)\n")])])]),t("p",[e._v("这个模块就封装完了，具体效果参考模块顶部图。")]),e._v(" "),t("h3",{attrs:{id:"功能按钮模块"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#功能按钮模块"}},[e._v("#")]),e._v(" 功能按钮模块")]),e._v(" "),t("p",[e._v("功能按钮模块比较简单，做一个按钮栏放置功能按钮即可。")]),e._v(" "),t("p",[e._v("但需要注意的是，可能有的角色并没有操作一些按钮的权限。关于这个我们在每个按钮上都可以定义一个"),t("strong",[e._v("权限标识")]),e._v("字段，当该用户的权限按钮数组有按钮的"),t("strong",[e._v("权限标识")]),e._v("，我们就展示按钮。权限按钮数组之前我们在"),t("code",[e._v("Redux")]),e._v("的"),t("code",[e._v("user")]),e._v("切片已经存储了，我们再封装一个"),t("strong",[e._v("权限按钮")]),e._v("组件来判断是否角色拥有权限即可。")]),e._v(" "),t("h4",{attrs:{id:"_1-封装权限按钮组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-封装权限按钮组件"}},[e._v("#")]),e._v(" 1.封装权限按钮组件")]),e._v(" "),t("p",[e._v("1.获取"),t("code",[e._v("Redux Store")]),e._v("中的权限标识数组")]),e._v(" "),t("p",[t("strong",[e._v("src/components/AuthComponent/index.jsx")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("import React from 'react'\nimport { useSelector } from 'react-redux'\n​\nconst AuthComponent = ({ permission, children, type = 'primary', ...props }) => {\n  // 获取权限标识数组\n  const rolePermission = useSelector((state) => state.user.userinfo.buttons)\n}\nexport default AuthComponent\n")])])]),t("p",[e._v("权限标识数组如下图所示，数组每项大概就是"),t("strong",[e._v("父模块名")]),e._v("+"),t("strong",[e._v("当前模块名")]),e._v("+"),t("strong",[e._v("按钮功能")])]),e._v(" "),t("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5005ef878c4a4b6e8baa337ba12f051c~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=709&h=550&s=45530&e=png&b=2a2f3a",alt:"img.png",referrerpolicy:"no-referrer"}}),e._v(" "),t("p",[e._v("2.遍历数组判断是否存在传入的"),t("strong",[e._v("权限标识")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 遍历数组判断是否存在此权限标识\nif (rolePermission.includes(permission)) {\nreturn (\n  <Button type={type} {...props}>\n    {children}\n  </Button>\n)\n}\nreturn null\n")])])]),t("h4",{attrs:{id:"_2-在组件直接编写结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-在组件直接编写结构"}},[e._v("#")]),e._v(" 2.在组件直接编写结构")]),e._v(" "),t("p",[e._v("由于结构比较简单，我们直接在管理页面的组件编写结构。")]),e._v(" "),t("p",[t("strong",[e._v("src/pages/System/User/index.jsx")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('const addRow = () => {\n  console.log(\'新增\')\n}\nconst deleteRow = () => {\n  console.log(\'删除\');\n}\nreturn (\n <>\n  <SearchBar formItemList={formItemList} getSearchParams={getSearchParams} />\n  <Card>\n    <Space>\n      <AuthComponent permission="system:user:add" onClick={addRow}>\n        新增\n      </AuthComponent>\n      <Popconfirm title="删除用户" description="确定要删除吗？" onConfirm={deleteRow}>\n        <AuthComponent permission="system:user:del" danger>\n          批量删除\n        </AuthComponent>\n      </Popconfirm>\n    </Space>\n  </Card>\n </>\n}\n')])])]),t("h3",{attrs:{id:"表格模块"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#表格模块"}},[e._v("#")]),e._v(" 表格模块")]),e._v(" "),t("p",[e._v("表格我们用到 Ant Design 的 Table 组件，由于分页、loading、接口请求占了很大的代码量，又是重复率很高的，所以封装是有必要的。")]),e._v(" "),t("h4",{attrs:{id:"封装-table-组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#封装-table-组件"}},[e._v("#")]),e._v(" 封装 Table 组件")]),e._v(" "),t("p",[e._v("首先我们先有个大概的雏形，请求表格的接口方法"),t("code",[e._v("fetchMethod")]),e._v("我们肯定是要传入的")]),e._v(" "),t("p",[t("strong",[e._v("src/components/CustomTable/index.jsx")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("import React from 'react'\nimport { Table } from 'antd'\nconst CustomTable = ({ fetchMethod, ...resetTableProps }) => {\n  return (\n    <Table\n      {...resetTableProps}\n    />\n  )\n}\nexport default CustomTable\n")])])]),t("p",[e._v("然后我们看一下 Table 的配置项")]),e._v(" "),t("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/85632801526248749b9b1f9ea6ec9d60~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1621&h=904&s=131043&e=png&b=fefefe",alt:"img.png",referrerpolicy:"no-referrer"}}),e._v(" "),t("p",[e._v("其中最重要的就是"),t("code",[e._v("columns")]),e._v("表格列配置，这个我们在父组件中传入【包含展示列、操作列】，它的配置比较重要的有")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("dataIndex")]),e._v("：列数据在数据项中对应的路径，支持通过数组查询嵌套路径")]),e._v(" "),t("li",[t("code",[e._v("render")]),e._v("：生成复杂数据的渲染函数，参数分别为当前行的值，当前行数据，行索引，function(text, record, index) {}，可以用它来自定义渲染效果")]),e._v(" "),t("li",[t("code",[e._v("title")]),e._v("：列头显示标题")])]),e._v(" "),t("p",[e._v("用户管理表格列配置示例如下，其中"),t("code",[e._v("rowkey")]),e._v("字段必须传入为数组中每列表格项唯一标识字段")]),e._v(" "),t("p",[t("strong",[e._v("src/pages/System/User/index.jsx")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 导入需要在表格列展示的组件\nimport {Tag} from 'Antd'\n// 导入api\nimport userApi from '@/api/user'\n...\n// 表格配置项\nconst columns = [\n{\n  title: '用户编号',\n  dataIndex: 'user_id',\n  align: 'center'\n},\n{\n  title: '用户名',\n  dataIndex: 'username',\n  align: 'center'\n},\n{\n  title: '角色',\n  dataIndex: 'roles',\n  render: (roles) => (\n    <span>\n      {roles.map((item) => {\n        let color = ''\n        if (item.role_name === '管理员') color = 'geekblue'\n        else color = 'green'\n        return (\n          <Tag color={color} key={item.role_id}>\n            {item.role_name}\n          </Tag>\n        )\n      })}\n    </span>\n  ),\n  align: 'center'\n},\n{\n  title: '状态',\n  dataIndex: 'status',\n  render: (status) => {\n    let color = status === '1' ? 'green' : 'red'\n    const statusItem = statusDict.find((item) => item.value === status)\n    return statusItem ? <Tag color={color}>{statusItem.label}</Tag> : ''\n  },\n  align: 'center'\n},\n{\n  title: '创建时间',\n  dataIndex: 'create_time',\n  align: 'center'\n}]\n...\nreturn (\n    <>\n      ...\n      <CustomTable\n        columns={columns}\n        rowKey=\"user_id\"\n        bordered\n        fetchMethod={userApi.manage.query}\n      />\n    </>\n  )\n")])])]),t("p",[e._v("其次就是"),t("code",[e._v("pagination")]),e._v("分页的配置，我们同样在父组件传入分页的数据，再传入分页数据或搜索参数动态变化的函数"),t("code",[e._v("onParamChange")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// 表格请求参数\nconst [requestParam, setRequestParam] = useState({\n  pageSize: 5,\n  current: 1\n})\n  <CustomTable\n    columns={columns}\n    rowKey="user_id"\n    bordered\n    fetchMethod={userApi.manage.query}\n    requestParam={requestParam}\n    onParamChange={(data) => setRequestParam({ ...requestParam, ...data })}\n  />\n')])])]),t("p",[e._v("然后，我们就在自定义表格组件里接收参数，完成两个步骤。")]),e._v(" "),t("h5",{attrs:{id:"_1-请求接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-请求接口"}},[e._v("#")]),e._v(" 1.请求接口")]),e._v(" "),t("p",[e._v("这里我们用一个"),t("code",[e._v("自定义hook")]),e._v("来完成，主要就是传入请求接口的方法和请求参数，传出数据数组")]),e._v(" "),t("p",[t("strong",[e._v("src/hooks/useFetchTableData.js")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("import { useEffect, useState } from 'react'\nconst useFetchTableData = (fetchMethod, params, onParamChange) => {\n  const [loading, setLoading] = useState(false)\n  const [tableData, setTableData] = useState([])\n​\n  // 获取表格数据\n  async function fetchTableData() {\n    try {\n      setLoading(true)\n      const {\n        data: { count, rows }\n      } = await fetchMethod({\n        pageSize: params.pageSize,\n        currentPage: params.current\n      })\n​\n      setTableData({\n        tableData: rows,\n        total: count\n      })\n      // 如果删除页面最后一个元素且不是第一页，重置请求参数且当前页数减去1\n      if (!rows.length && params.current !== 1) {\n        onParamChange({pageSize:5,current:params.current-1})\n      }\n    } finally {\n      setLoading(false)\n    }\n  }\n​\n  useEffect(() => {\n    fetchTableData()\n  }, [params])\n  // 导出数组数组和loading\n  return { loading, tableData }\n}\nexport default useFetchTableData\n")])])]),t("h5",{attrs:{id:"_2-赋值给自定义-table-组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-赋值给自定义-table-组件"}},[e._v("#")]),e._v(" 2.赋值给自定义 Table 组件")]),e._v(" "),t("p",[e._v("自定义 Table 组件接收 hooks 导出的数据数组并赋值给组件")]),e._v(" "),t("p",[t("strong",[e._v("src/components/CustomTable/index.jsx")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("import React from 'react'\nimport { Table } from 'antd'\n// 导入自定义hook\nimport useFetchTableData from '@/hooks/useFetchTableData'\nconst CustomTable = ({ fetchMethod, columns, requestParam, onParamChange, ...resetTableProps }) => {\n  // 请求表格数据\n  const { loading, tableData } = useFetchTableData(fetchMethod, requestParam, onParamChange)\n​\n  // 翻页重设参数\n  const onTableChange = (page) => {\n    onParamChange(page)\n  }\n​\n  return (\n    <Table\n      {...resetTableProps}\n      onChange={onTableChange}\n      loading={loading}\n      dataSource={tableData.tableData}\n      columns={columns}\n      pagination={{\n        pageSize: requestParam.pageSize ?? 5,\n        current: requestParam.current ?? 1,\n        total: tableData.total,\n        showTotal: (t) => <span style={{ color: '#333' }}>共{t}条</span>\n      }}\n    />\n  )\n}\nexport default CustomTable\n")])])]),t("p",[e._v("到这里表格就封装完了，由于进行了"),t("strong",[e._v("属性透传")]),e._v("，大家可以再传一些所需要的参数")]),e._v(" "),t("h2",{attrs:{id:"代码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#代码"}},[e._v("#")]),e._v(" 代码")]),e._v(" "),t("p",[e._v("上述实现的代码都放在"),t("a",{attrs:{href:"https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2FAlan-222%2Freact-antd5-admin",title:"https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2FAlan-222%2Freact-antd5-admin",target:"_blank",rel:"noopener noreferrer"}},[e._v("react-antd5-admin"),t("OutboundLink")],1),e._v("，大家可自行查阅")])])}),[],!1,null,null,null);t.default=s.exports}}]);