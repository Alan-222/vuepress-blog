(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{479:function(e,n,l){"use strict";l.r(n);var a=l(2),r=Object(a.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"前言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[e._v("#")]),e._v(" 前言")]),e._v(" "),n("p",[e._v("完成了用户管理页面，剩下两个页面角色管理以及菜单管理也大同小异。但角色管理还有一个分配资源的功能需要实现，作用为选择角色的权限，我们可以通过"),n("code",[e._v("el-tree")]),e._v("树形控件来完成。当打开分配角色弹窗时给树形控件传递一个树形结构的数组去渲染完整的"),n("strong",[e._v("权限结构（菜单+对应的按钮）")]),e._v(" ，然后获取角色的"),n("strong",[e._v("权限 id")]),e._v("勾选就可以。然后"),n("strong",[e._v("更新角色权限")]),e._v("只需要改变权限时记录下"),n("strong",[e._v("权限 id")]),e._v("再调用更新角色资源的接口即可。")]),e._v(" "),n("h2",{attrs:{id:"角色管理分配资源的实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#角色管理分配资源的实现"}},[e._v("#")]),e._v(" 角色管理分配资源的实现")]),e._v(" "),n("h3",{attrs:{id:"接口数据接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#接口数据接口"}},[e._v("#")]),e._v(" 接口数据接口")]),e._v(" "),n("p",[e._v("首先我们测试一下获取菜单项接口大概得到怎样的菜单结构，如图")]),e._v(" "),n("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1fb72fbc241c4292a9e051f7830d920e~tplv-k3u1fbpfcp-watermark.image?",alt:"img.png",referrerpolicy:"no-referrer"}}),e._v(" "),n("p",[e._v("数组结构的话大概就是")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("{\n  label:\"xxx\",   // 菜单标题\n  value:\"xxx\"    // 权限id\n  children:[{    // 子孩子数组\n    label:'xx',\n    value:'xx',\n    perms:[{      // 按钮数组\n      label:\"xx\"\n      value:''\n    }]\n  }]  \n}\n")])])]),n("p",[e._v("符合"),n("code",[e._v("el-tree")]),e._v("树形控件的要求，"),n("strong",[e._v("value")]),e._v("属性作为每个树节点用来作为唯一标识的属性")]),e._v(" "),n("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0aca0b0bf1cd4e18b0eeb8bcfdadca4f~tplv-k3u1fbpfcp-watermark.image?",alt:"img.png",referrerpolicy:"no-referrer"}}),e._v(" "),n("h3",{attrs:{id:"html-结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#html-结构"}},[e._v("#")]),e._v(" html 结构")]),e._v(" "),n("p",[e._v("我们首先确定"),n("code",[e._v("html")]),e._v("结构，用"),n("code",[e._v("el-scrollbar")]),e._v("包裹树形控件，超出长度显示滚动条。然后把他们放在弹窗里，点击"),n("strong",[e._v("分配资源")]),e._v("按钮显示弹窗。树形控件中用到插槽，包括菜单的标题，若有按钮的话则显示复选框（遍历菜单所有的按钮）")]),e._v(" "),n("p",[n("strong",[e._v("views/system/role.vue")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('\x3c!--分配资源弹窗--\x3e\n<el-dialog :title="\'【\' + checkedRole.role_name + \'】资源分配\'" v-model="resourceDialogVisible" width="800px">\n  <el-scrollbar max-height="600px" v-loading="loading">\n    <el-tree ref="resourceRef" node-key="value" show-checkbox :data="resourceOptions" :default-expand-all="true"\n      @check-change="handleResourceCheckChange">\n      <template #default="{ data }">\n        <span>{{ data.label }}</span>\n​\n        <div v-if="data.perms" class="resource-tree-node">\n          <el-divider direction="vertical" />\n          <div class="node-content">\n            <el-checkbox v-for="perm in data.perms" :key="perm.value" :label="perm.value" border size="small"\n              v-model="btnPerms[perm.value]">{{ perm.label }}</el-checkbox>\n          </div>\n        </div>\n      </template>\n    </el-tree>\n  </el-scrollbar>\n​\n  <template #footer>\n    <div class="dialog-footer">\n      <el-button type="primary" @click="handleRoleResourceSubmit">确 定</el-button>\n      <el-button @click="cancelResourceAssign">取 消</el-button>\n    </div>\n  </template>\n</el-dialog>\n')])])]),n("p",[n("strong",[e._v("js 代码")])]),e._v(" "),n("p",[e._v("上面的 html 结构的"),n("code",[e._v("el-tree")]),e._v("中有"),n("code",[e._v("@check-change")]),e._v("方法，能获得到勾选菜单的数据和当前勾选的状态，当勾选或者取消菜单选项时触发。我们只要在勾选菜单时将对应"),n("code",[e._v("按钮checkbox")]),e._v("的状态改为跟当前菜单勾选状态一样即可。我用了"),n("code",[e._v("btnPerms")]),e._v("的数组来存储按钮，结构如下")]),e._v(" "),n("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/787e5f5f095344438f8a62ec808b7239~tplv-k3u1fbpfcp-watermark.image?",alt:"img.png",referrerpolicy:"no-referrer"}}),e._v(" "),n("p",[e._v("比如当我取消勾选了图中 20、21 的父菜单，就将 20、21 的"),n("code",[e._v("checkbox")]),e._v("也取消勾选。代码如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 树形控件菜单勾/反选方法\nconst handleResourceCheckChange = (\n  data: Resource,\n  isCheck: boolean,\n  sonHasCheck: boolean\n) => {\n  console.log('data', data);\n  console.log('isCheck', isCheck);\n  // 当勾/反选的菜单存在按钮时，按钮的状态改成对应菜单状态\n  if (data.perms) {\n    data.perms.forEach(item => {\n      btnPerms.value[item.value] = isCheck;\n    });\n  }\n};\n")])])]),n("p",[e._v("还有就是当打开角色分配资源弹窗时候的方法，有以下几个步骤。")]),e._v(" "),n("ul",[n("li",[e._v("获取全部的菜单结构")]),e._v(" "),n("li",[e._v("获取该角色所有的菜单 id 数组和按钮 id 数组，对应进行勾选")])]),e._v(" "),n("p",[e._v("方法如下所示：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("/**\n * 资源分配\n */\nfunction openRoleResourceDialog(row: RoleItem) {\n  resourceDialogVisible.value = true;\n  loading.value = true;\n​\n  const roleId: number = row.role_id;\n  checkedRole.value = {\n    role_id: roleId,\n    role_name: row.role_name\n  };\n​\n  // 获取所有的资源\n  listMenuOptions().then(response => {\n    resourceOptions.value = response.data;\n​\n    // 获取角色拥有的资源\n    getRoleResources(roleId).then(({ data }) => {\n      // 勾选的菜单回显\n      const checkedMenuIds = data.menu_ids;\n      resourceRef.value.setCheckedKeys(checkedMenuIds);\n​\n      nextTick(() => {\n        // 勾选的权限回显\n        const rolePermIds = data.permIds;\n​\n        state.allPermIds = filterResourcePermIds(response.data, []);\n        if (state.allPermIds) {\n          state.allPermIds.forEach(permId => {\n            if (rolePermIds.indexOf(permId) > -1) {\n              btnPerms.value[permId] = true;\n            } else {\n              btnPerms.value[permId] = false;\n            }\n          });\n        }\n        loading.value = false;\n      });\n    });\n  });\n}\n​\nconst filterResourcePermIds = (resources: Resource[], permIds: string[]) => {\n  resources.forEach(resource => {\n    if (resource.perms) {\n      resource.perms.forEach(perm => {\n        permIds.push(perm.value);\n      });\n    }\n    if (resource.children) {\n      filterResourcePermIds(resource.children, permIds);\n    }\n  });\n  return permIds;\n};\n")])])]),n("p",[e._v("然后是提交资源的方法。我们可以通过"),n("code",[e._v("el-tree")]),e._v("控件的"),n("code",[e._v("getCheckedNodes")]),e._v("的方法获得勾选的菜单数组，再通过上面的"),n("code",[e._v("btnPerms")]),e._v("获得勾选的按钮数组。然后凭这两个数组更新角色资源。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("/**\n * 分配资源提交\n */\nfunction handleRoleResourceSubmit() {\n  const checkedMenuIds: any[] = resourceRef.value\n    .getCheckedNodes(false, true)\n    .map((node: any) => node.value);\n​\n  const checkedPermIds = [] as string[];\n  if (state.allPermIds) {\n    state.allPermIds.forEach(permId => {\n      if (btnPerms.value[permId]) {\n        checkedPermIds.push(permId);\n      }\n    });\n  }\n​\n  const RoleResource = {\n    menu_ids: checkedMenuIds,\n    permIds: checkedPermIds\n  };\n​\n  updateRoleResource(checkedRole.value.role_id, RoleResource).then(res => {\n    ElMessage.success('分配权限成功');\n    state.resourceDialogVisible = false;\n    handleQuery();\n  });\n}\n")])])]),n("p",[e._v("角色管理总体代码如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<template>\n  <div class="content-title">用户管理</div>\n  <div class="content-container">\n    \x3c!-- 搜索表单 --\x3e\n    <el-form ref="queryFormRef" :model="queryParams" :inline="true">\n      <el-form-item>\n        <el-button color="#3c8dbc" :icon="CirclePlus" @click="handleAdd">新增</el-button>\n        <el-button color="#3c8dbc" :icon="Remove" :disabled="multiple" @click="handleDelete">批量删除</el-button>\n      </el-form-item>\n​\n      <el-form-item prop="role_name">\n        <el-input v-model="queryParams.role_name" placeholder="角色名称" clearable @keyup.enter="handleQuery" />\n      </el-form-item>\n​\n      <el-form-item>\n        <el-button color="#3c8dbc" :icon="Search" @click="handleQuery">搜索</el-button>\n        <el-button color="#3c8dbc" :icon="Refresh" @click="resetQuery">重置</el-button>\n      </el-form-item>\n    </el-form>\n​\n    \x3c!-- 数据表格 --\x3e\n    <el-table ref="dataTableRef" v-loading="loading" :data="roleList" @selection-change="handleSelectionChange"\n      highlight-current-row border>\n      <el-table-column type="selection" width="55" align="center" />\n      <el-table-column label="角色名称" prop="role_name" align="center" />\n      <el-table-column label="角色描述" prop="remark" align="center" />\n​\n      <el-table-column label="状态" align="center">\n        <template #default="scope">\n          <el-tag v-if="scope.row.status === 1" type="success">正常</el-tag>\n          <el-tag v-else type="info">禁用</el-tag>\n        </template>\n      </el-table-column>\n​\n      <el-table-column prop="create_time" label="创建时间" align="center" />\n      <el-table-column prop="update_time" label="修改时间" align="center" />\n​\n      <el-table-column label="操作" align="center">\n        <template #default="scope">\n          <el-button link type="primary" size="small" @click.stop="openRoleResourceDialog(scope.row)">\n            分配资源\n          </el-button>\n          <el-button link type="primary" size="small" circle plain @click.stop="handleUpdate(scope.row)">\n            编辑\n          </el-button>\n          <el-button link type="primary" size="small" circle plain @click.stop="handleDelete(scope.row)">\n            删除\n          </el-button>\n        </template>\n      </el-table-column>\n    </el-table>\n​\n    \x3c!-- 分页工具条 --\x3e\n    <el-pagination :total="total" v-model:currentPage="queryParams.currentPage" v-model:page-size="queryParams.pageSize"\n      :page-sizes="[1, 3, 5, 10]" layout="total, sizes, prev, pager, next, jumper" @size-change="handleSizeChange"\n      @current-change="handleCurrentChange" style="margin-top: 20px;" />\n​\n    \x3c!-- 表单弹窗 --\x3e\n    <el-dialog :title="dialog.title" v-model="dialog.visible" width="500px" destroy-on-close>\n      <el-form ref="dataFormRef" :model="formData" :rules="rules" label-width="100px">\n        <el-form-item label="角色名称" prop="role_name">\n          <el-input v-model="formData.role_name" placeholder="请输入角色名称" />\n        </el-form-item>\n​\n        <el-form-item label="角色描述" prop="remark">\n          <el-input v-model="formData.remark" placeholder="请输入角色描述" />\n        </el-form-item>\n​\n        <el-form-item label="状态">\n          <el-radio-group v-model="formData.status">\n            <el-radio :label="1">正常</el-radio>\n            <el-radio :label="0">停用</el-radio>\n          </el-radio-group>\n        </el-form-item>\n      </el-form>\n      <div slot="footer" class="dialog-footer">\n        <el-button type="primary" @click="submitFormData">确 定</el-button>\n        <el-button @click="cancel">取 消</el-button>\n      </div>\n    </el-dialog>\n​\n    \x3c!--分配资源弹窗--\x3e\n    <el-dialog :title="\'【\' + checkedRole.role_name + \'】资源分配\'" v-model="resourceDialogVisible" width="800px">\n      <el-scrollbar max-height="600px" v-loading="loading">\n        <el-tree ref="resourceRef" node-key="value" show-checkbox :data="resourceOptions" :default-expand-all="true"\n          @check-change="handleResourceCheckChange">\n          <template #default="{ data }">\n            <span>{{ data.label }}</span>\n​\n            <div v-if="data.perms" class="resource-tree-node">\n              <el-divider direction="vertical" />\n              <div class="node-content">\n                <el-checkbox v-for="perm in data.perms" :key="perm.value" :label="perm.value" border size="small"\n                  v-model="btnPerms[perm.value]">{{ perm.label }}</el-checkbox>\n              </div>\n            </div>\n          </template>\n        </el-tree>\n      </el-scrollbar>\n​\n      <template #footer>\n        <div class="dialog-footer">\n          <el-button type="primary" @click="handleRoleResourceSubmit">确 定</el-button>\n          <el-button @click="cancelResourceAssign">取 消</el-button>\n        </div>\n      </template>\n    </el-dialog>\n  </div>\n</template>\n​\n<script lang="ts">\nexport default {\n  name: \'role\'\n};\n<\/script>\n​\n<script setup lang="ts">\nimport { nextTick, onMounted, reactive, ref, toRefs } from \'vue\';\nimport {\n  listRolePages,\n  updateRole,\n  getRoleFormDetail,\n  addRole,\n  deleteRoles,\n  getRoleResources,\n  updateRoleResource\n} from \'@/utils/api/user/role\';\nimport { listMenuOptions } from \'@/utils/api/user/menu\';\n​\nimport { ElForm, ElMessage, ElMessageBox, ElTree } from \'element-plus\';\nimport { Search, CirclePlus, Refresh, Remove } from \'@element-plus/icons-vue\';\n​\n​\nconst queryFormRef = ref(ElForm);\nconst dataFormRef = ref(ElForm);\nconst resourceRef = ref(ElTree);\n​\nconst state = reactive({\n  loading: true,\n  // 选中ID数组\n  ids: [],\n  // 非单个禁用\n  single: true,\n  // 非多个禁用\n  multiple: true,\n  queryParams: {\n    currentPage: 1,\n    pageSize: 10,\n    role_name: undefined\n  } as RoleQueryParam,\n  roleList: [] as RoleItem[],\n  total: 0,\n  dialog: {\n    title: \'\',\n    visible: false\n  },\n  formData: {\n    role_name: \'\',\n    remark: \'\',\n    status: 1\n  } as RoleFormData,\n  rules: {\n    role_name: [{ required: true, message: \'请输入角色名称\', trigger: \'blur\' }],\n    remark: [{ required: true, message: \'请输入角色描述\', trigger: \'blur\' }]\n  },\n  resourceDialogVisible: false,\n  resourceOptions: [] as Resource[],\n  btnPerms: {} as any,\n  // 勾选的菜单ID\n  checkedMenuIds: new Set([]),\n  allPermIds: [] as string[],\n  // 选中的角色\n  checkedRole: {\n    role_id: 0,\n    role_name: \'\'\n  }\n});\n​\nconst {\n  loading,\n  multiple,\n  queryParams,\n  roleList,\n  total,\n  dialog,\n  formData,\n  rules,\n  resourceDialogVisible,\n  checkedRole,\n  resourceOptions,\n  btnPerms\n} = toRefs(state);\n​\nfunction handleQuery() {\n  state.loading = true;\n  listRolePages(state.queryParams).then(({ data }) => {\n    state.roleList = data.rows;\n    state.total = data.count;\n    state.loading = false;\n  });\n}\n// 每页显示条数改变 就会触发这个函数\nconst handleSizeChange = (val: number) => {\n  // 保存每页显示的条数\n  queryParams.value.pageSize = val;\n  queryParams.value.currentPage = 1;\n  // 调用分页函数\n  handleQuery();\n}\n// 当前页码改变 就会触发这个函数\nconst handleCurrentChange = (val: number) => {\n  // 保存当前页码\n  queryParams.value.currentPage = val;\n  // 调用分页函数\n  handleQuery();\n}\n/**\n * 查询重置\n */\nfunction resetQuery() {\n  queryFormRef.value.resetFields();\n  handleQuery();\n}\n​\nfunction handleSelectionChange(selection: any) {\n  state.ids = selection.map((item: any) => item.role_id);\n  state.single = selection.length !== 1;\n  state.multiple = !selection.length;\n}\n​\nfunction handleAdd() {\n  state.dialog = {\n    title: \'添加角色\',\n    visible: true\n  };\n}\n​\nfunction handleUpdate(row: any) {\n  state.dialog = {\n    title: \'修改角色\',\n    visible: true\n  };\n  const roleId = row.role_id || state.ids;\n  getRoleFormDetail(roleId).then(({ data }) => {\n    state.formData = data;\n  });\n}\n​\nfunction submitFormData() {\n  loading.value = true;\n  dataFormRef.value.validate((valid: any) => {\n    if (valid) {\n      if (state.formData.role_id) {\n        updateRole(state.formData.role_id as any, state.formData).then(() => {\n          ElMessage.success(\'修改角色成功\');\n          cancel();\n          handleQuery();\n          loading.value = false;\n        });\n      } else {\n        addRole(state.formData).then(() => {\n          cancel();\n          ElMessage.success(\'新增角色成功\');\n          handleQuery();\n          loading.value = false;\n        });\n      }\n    }\n  });\n}\n​\n/**\n * 取消\n */\nfunction cancel() {\n  dialog.value.visible = false;\n  formData.value.role_id = undefined;\n  dataFormRef.value.resetFields();\n  dataFormRef.value.clearValidate();\n}\n​\n/**\n *  删除\n */\nfunction handleDelete(row: any) {\n  const ids = row.role_id || state.ids;\n  ElMessageBox.confirm(\'确认删除已选中的数据项?\', \'警告\', {\n    confirmButtonText: \'确定\',\n    cancelButtonText: \'取消\',\n    type: \'warning\'\n  })\n    .then(() => {\n      deleteRoles({ role_ids: ids }).then(() => {\n        ElMessage.success(\'删除成功\');\n        handleQuery();\n      });\n    })\n    .catch(() => ElMessage.info(\'已取消删除\'));\n}\n// 树形控件菜单勾/反选方法\nconst handleResourceCheckChange = (\n  data: Resource,\n  isCheck: boolean,\n  sonHasCheck: boolean\n) => {\n  console.log(\'data\', data);\n  console.log(\'isCheck\', isCheck);\n  // 当勾/反选的菜单存在按钮时，按钮的状态改成对应菜单状态\n  if (data.perms) {\n    data.perms.forEach(item => {\n      btnPerms.value[item.value] = isCheck;\n    });\n  }\n};\n​\n/**\n * 资源分配\n */\nfunction openRoleResourceDialog(row: RoleItem) {\n  resourceDialogVisible.value = true;\n  loading.value = true;\n​\n  const roleId: number = row.role_id;\n  checkedRole.value = {\n    role_id: roleId,\n    role_name: row.role_name\n  };\n​\n  // 获取所有的资源\n  listMenuOptions().then(response => {\n    resourceOptions.value = response.data;\n​\n    // 获取角色拥有的资源\n    getRoleResources(roleId).then(({ data }) => {\n      // 勾选的菜单回显\n      const checkedMenuIds = data.menu_ids;\n      resourceRef.value.setCheckedKeys(checkedMenuIds);\n​\n      nextTick(() => {\n        // 勾选的权限回显\n        const rolePermIds = data.permIds;\n​\n        state.allPermIds = filterResourcePermIds(response.data, []);\n        if (state.allPermIds) {\n          state.allPermIds.forEach(permId => {\n            if (rolePermIds.indexOf(permId) > -1) {\n              btnPerms.value[permId] = true;\n            } else {\n              btnPerms.value[permId] = false;\n            }\n          });\n        }\n        loading.value = false;\n      });\n    });\n  });\n}\n​\nconst filterResourcePermIds = (resources: Resource[], permIds: string[]) => {\n  resources.forEach(resource => {\n    if (resource.perms) {\n      resource.perms.forEach(perm => {\n        permIds.push(perm.value);\n      });\n    }\n    if (resource.children) {\n      filterResourcePermIds(resource.children, permIds);\n    }\n  });\n  return permIds;\n};\n/**\n * 分配资源提交\n */\nfunction handleRoleResourceSubmit() {\n  const checkedMenuIds: any[] = resourceRef.value\n    .getCheckedNodes(false, true)\n    .map((node: any) => node.value);\n​\n  const checkedPermIds = [] as string[];\n  if (state.allPermIds) {\n    state.allPermIds.forEach(permId => {\n      if (btnPerms.value[permId]) {\n        checkedPermIds.push(permId);\n      }\n    });\n  }\n​\n  const RoleResource = {\n    menu_ids: checkedMenuIds,\n    permIds: checkedPermIds\n  };\n​\n  updateRoleResource(checkedRole.value.role_id, RoleResource).then(res => {\n    ElMessage.success(\'分配权限成功\');\n    state.resourceDialogVisible = false;\n    handleQuery();\n  });\n}\n​\n/**\n * 取消资源分配\n */\nfunction cancelResourceAssign() {\n  state.resourceDialogVisible = false;\n}\n​\nonMounted(() => {\n  handleQuery();\n});\n<\/script>\n​\n<style lang="scss">\n.resource-tree-node {\n  flex-wrap: wrap;\n  display: inline-flex;\n  font-size: 14px;\n  justify-content: flex-end;\n​\n  .node-content {\n    width: 600px;\n    display: flex;\n    flex-wrap: wrap;\n  }\n​\n  .el-divider--vertical {\n    height: 1.5em !important;\n  }\n}\n​\n​\n.el-tree-node__content {\n  height: auto !important;\n}\n​\n.el-checkbox-group {\n  display: flex;\n  flex-wrap: wrap;\n​\n  &:hover {\n    background-color: var(--el-tree-node-hover-bg-color);\n  }\n​\n  &:active {\n    background-color: var(--el-tree-node-hover-bg-color);\n  }\n}\n​\n.el-checkbox.el-checkbox--small {\n  margin: 5px;\n  z-index: 999;\n  background: #fff;\n}\n</style>\n')])])])])}),[],!1,null,null,null);n.default=r.exports}}]);