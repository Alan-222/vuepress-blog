(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{467:function(e,n,r){"use strict";r.r(n);var t=r(2),a=Object(t.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"前言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[e._v("#")]),e._v(" 前言")]),e._v(" "),n("p",[e._v("已经实现了登录模块（图形验证码、获取 token...）和 layout 模块，vuex（持久化用户信息）和 router（根据权限获取路由列表）模块也已经封装完毕。接下来就可以开始页面组件的开发，主要有用户管理、角色管理和菜单管理这三个后台管理系统中通用的模块，其余的模块大家感兴趣可以自行扩展。")]),e._v(" "),n("h2",{attrs:{id:"后端获取分页列表的-bug"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#后端获取分页列表的-bug"}},[e._v("#")]),e._v(" 后端获取分页列表的 bug")]),e._v(" "),n("p",[e._v("在调试的时候发现，发现后端分页的时候 count 数目错误。大概就是"),n("code",[e._v("sequelize")]),e._v("在"),n("code",[e._v("findAndCountAll")]),e._v("带 include 配置项的时候会加上 include 所带模型的 count，也就是它查了一个表的数量又带上另一个表的数量。解决方法就是在有"),n("code",[e._v("findAndCountAll")]),e._v("方法并且带"),n("code",[e._v("include")]),e._v("配置项中加入"),n("code",[e._v("distinct:true")]),e._v("去重")]),e._v(" "),n("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fcb12a78533644a0bf271443086d9e80~tplv-k3u1fbpfcp-watermark.image?",alt:"img.png",referrerpolicy:"no-referrer"}}),e._v(" "),n("h2",{attrs:{id:"用户管理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#用户管理"}},[e._v("#")]),e._v(" 用户管理")]),e._v(" "),n("p",[e._v("用户管理页面主要分以下几个功能")]),e._v(" "),n("ul",[n("li",[e._v("分页获取用户列表")]),e._v(" "),n("li",[e._v("对用户进行增删改查")]),e._v(" "),n("li",[e._v("控制不同角色的权限按钮的显隐")])]),e._v(" "),n("h3",{attrs:{id:"控制不同角色的权限按钮的显隐"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#控制不同角色的权限按钮的显隐"}},[e._v("#")]),e._v(" 控制不同角色的权限按钮的显隐")]),e._v(" "),n("p",[e._v("我们先来完成第三个功能，要完成按钮的显隐我们第一个想到的就是在 button 标签中加入"),n("code",[e._v("v-show")]),e._v("或者"),n("code",[e._v("v-if")]),e._v("，但这两个指令没有办法很容易对用户的角色是否拥有此按钮进行判断，所以我们自己定义一个指令来完成这个工作。")]),e._v(" "),n("p",[e._v("我们先在 src 目录下建立一个 directive 目录来存放我们的自定义指令，然后建立文件夹 permission 来存放我们的控制权限按钮显隐的指令，再建立一个主文件导出所有指令方法，目录结构如下。")]),e._v(" "),n("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/714686db9d534971b05b3f3e8f24acdb~tplv-k3u1fbpfcp-watermark.image?",alt:"img.png",referrerpolicy:"no-referrer"}}),e._v(" "),n("p",[e._v("我们首先思考若有指令我们传的应该是"),n("strong",[e._v("权限标识")]),e._v("字段（按钮的唯一标识），形如"),n("code",[e._v('v-hasPerm="system:user:Add"')]),e._v("，这样指令方法接收到"),n("strong",[e._v("权限标识")]),e._v("到用户的权限按钮列表中遍历查找，若有返回 true 按钮显示，若无则移除按钮，我们来实现此方法。")]),e._v(" "),n("p",[n("strong",[e._v("directive/permission/index.ts")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import { store } from '@/store';\nimport { Directive, DirectiveBinding } from 'vue';\n​\n/**\n * 按钮权限校验\n */\nexport const hasPerm: Directive = {\n  mounted(el: HTMLElement, binding: DirectiveBinding) {\n    // 「超级管理员」拥有所有的按钮权限\n    const roles = store.state.user.roles;\n    if (roles.includes('管理员')) {\n      return true;\n    }\n    // 「其他角色」按钮权限校验\n    const { value } = binding;\n    if (value) {\n      const requiredPerms = value; // DOM绑定需要的按钮权限标识，例如system:user:add\n      // 判断vuex的buttons中是否存在传入的权限标识\n      const hasPerm = store.state.user.buttons?.some((button: string) => {\n        return requiredPerms.includes(button);\n      });\n      // 不存在，从DOM结构中移除这个按钮\n      if (!hasPerm) {\n        el.parentNode && el.parentNode.removeChild(el);\n      }\n    } else {\n      throw new Error('需要权限!\"');\n    }\n  }\n};\n")])])]),n("p",[n("strong",[e._v("directive/index.ts")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("export { hasPerm } from './permission';\n")])])]),n("p",[e._v("然后在"),n("code",[e._v("main.ts")]),e._v("中注册指令")]),e._v(" "),n("p",[n("strong",[e._v("main.ts")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import { createApp, Directive } from 'vue';\n...\n// 导入自定义指令\nimport * as directive from '@/directive';\nObject.keys(directive).forEach((key) => {\n  app.directive(key, (directive as { [key: string]: Directive })[key]);\n});\n")])])]),n("p",[e._v("但暂时我们还没有添加权限按钮，我们稍后添加后再来实际使用")]),e._v(" "),n("h3",{attrs:{id:"分页获取用户列表"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#分页获取用户列表"}},[e._v("#")]),e._v(" 分页获取用户列表")]),e._v(" "),n("p",[e._v("分页列表用的是"),n("code",[e._v("element-plus")]),e._v("的组件"),n("code",[e._v("el-pagination")]),e._v("，给它传递两个值"),n("code",[e._v("pageSize")]),e._v("（每页数量）、"),n("code",[e._v("currentPage")]),e._v("（当前页）。再传递两个方法，一是当每页数量变化的时候的方法，这时我们将上面传递的"),n("code",[e._v("pageSize")]),e._v("传给此方法，然后重新获取列表。而是当前页变化时候的方法，与第一个方法同样做法。")]),e._v(" "),n("p",[n("strong",[e._v("views/system/user.vue")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<el-pagination v-model:currentPage="queryParams.currentPage" v-model:page-size="queryParams.pageSize"\n  :page-sizes="[1, 3, 5, 10]" layout="total, sizes, prev, pager, next, jumper" :total="userTotal"\n  @size-change="handleSizeChange" @current-change="handleCurrentChange" style="margin-top: 20px;" />\n ...\n <script lang="ts" setup>\n // 分页参数\nconst queryParams = reactive<userQueryParams>({\n  currentPage: 1,    // 当前页\n  pageSize: 10,       // 每页条数\n  username: undefined,\n  status: undefined\n})\nconst queryFormRef = ref<FormInstance>()\nlet userTotal = ref(0) // 数据总条数\n// 按照分页显示数据的函数\nconst getListUser = () => {\n  loading.value = true\n  // 发送ajax请求 把分页数据发送给后端\n  listUser(queryParams)\n    .then(res => {\n      console.log(res);\n      // 接收后端返回的数据总条数 total 和 对应页码的数据 data\n      let { count, rows } = res.data;\n      // 赋值给对应的变量即可\n      userTotal.value = count;\n      tableData.data = rows;\n      // 如果当前页没有数据 且 排除第一页\n      if (!rows.length && queryParams.currentPage !== 1) {\n        // 页码减去 1\n        queryParams.currentPage -= 1;\n        // 再调用自己\n        getListUser();\n      }\n    })\n    .finally(() => {\n      loading.value = false\n    })\n}\n// 每页显示条数改变 就会触发这个函数\nconst handleSizeChange = (val: number) => {\n  // 保存每页显示的条数\n  queryParams.pageSize = val;\n  queryParams.currentPage = 1;\n  // 调用分页函数\n  getListUser();\n}\n// 当前页码改变 就会触发这个函数\nconst handleCurrentChange = (val: number) => {\n  // 保存当前页码\n  queryParams.currentPage = val;\n  // 调用分页函数\n  getListUser();\n}\n <\/script>\n')])])]),n("h4",{attrs:{id:"显示效果"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#显示效果"}},[e._v("#")]),e._v(" 显示效果")]),e._v(" "),n("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3e779affeb25478292e674e1f7a7ef19~tplv-k3u1fbpfcp-watermark.image?",alt:"img.png",referrerpolicy:"no-referrer"}}),e._v(" "),n("h3",{attrs:{id:"对用户进行增删改查"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#对用户进行增删改查"}},[e._v("#")]),e._v(" 对用户进行增删改查")]),e._v(" "),n("p",[e._v("增改的功能需要弹窗与表单进行操作。而查只需要传递对应查询参数给分页函数即可，删只需要传递删除 id 或数组去调用接口方法，在此不再多做赘述。")]),e._v(" "),n("p",[e._v("增加和修改我们放在同一个弹窗当中，但"),n("strong",[e._v("点击新增（不带用户 id）")]),e._v(" 时我们展示空表单并在点击提交时调用新增用户的方法。而"),n("strong",[e._v("点击修改或重置密码")]),e._v("我们"),n("strong",[e._v("传递")]),e._v("一个"),n("strong",[e._v("用户 id")]),e._v("，然后通过 action 字段来区分操作，然后传 id 时获取该 id 的用户数据传递给表单对象渲染上去，用户就可对其进行修改，并提交调用修改用户方法。有"),n("strong",[e._v("action 字段")]),e._v("例如为"),n("code",[e._v("edit-pwd")]),e._v("就将表单显示为重置密码表单。")]),e._v(" "),n("h4",{attrs:{id:"新增弹窗"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#新增弹窗"}},[e._v("#")]),e._v(" 新增弹窗")]),e._v(" "),n("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b65370f9fe0a4095bcbef8f441aab1c8~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png",width:"50%",referrerpolicy:"no-referrer"}}),e._v(" "),n("h4",{attrs:{id:"修改弹窗"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#修改弹窗"}},[e._v("#")]),e._v(" 修改弹窗")]),e._v(" "),n("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c260d820fa43442db93c105480355700~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png",width:"50%",referrerpolicy:"no-referrer"}}),e._v(" "),n("h4",{attrs:{id:"重置密码弹窗"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#重置密码弹窗"}},[e._v("#")]),e._v(" 重置密码弹窗")]),e._v(" "),n("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0960843e42b34b8c83ed2171ff76fc3c~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png",width:"50%",referrerpolicy:"no-referrer"}}),e._v(" "),n("p",[n("strong",[e._v("views/system/user.vue")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<el-dialog v-model="dialogFormVisible" :title="title" width="25%">\n  \x3c!-- 新增及编辑弹窗表单 --\x3e\n  <el-form :model="form" ref="editFormRef" :rules="rules" label-width="6em">\n    <el-form-item v-if="form.action !== \'edit-pwd\'" label="用户帐号" prop="username">\n      <el-input v-model="form.username" placeholder="请输入帐号" />\n    </el-form-item>\n    <el-form-item v-if="form.action === \'edit-pwd\'" label="原密码" prop="old_password">\n      <el-input v-model="form.old_password" type="password" placeholder="请输入原用户密码" />\n    </el-form-item>\n    <el-form-item v-if="!form.user_id || form.action === \'edit-pwd\'" label="用户密码" prop="password">\n      <el-input v-model="form.password" type="password" placeholder="请输入用户密码" />\n    </el-form-item>\n    <el-form-item v-if="!form.user_id || form.action === \'edit-pwd\'" label="确认密码" prop="repassword">\n      <el-input v-model="form.repassword" type="password" placeholder="请再次输入用户密码" />\n    </el-form-item>\n    <el-form-item v-if="form.action !== \'edit-pwd\'" label="角色" prop="role_ids">\n      <el-select v-model="form.role_ids" multiple placeholder="请选择角色">\n        <el-option v-for="item in roles" :key="item.role_id" :label="item.role_name" :value="item.role_id" />\n      </el-select>\n    </el-form-item>\n    <el-form-item v-if="form.action !== \'edit-pwd\'" label="状态" prop="status">\n      <el-radio-group v-model="form.status">\n        <el-radio :label="1">开启</el-radio>\n        <el-radio :label="0">停用</el-radio>\n      </el-radio-group>\n    </el-form-item>\n  </el-form>\n  <div slot="footer" class="dialog-footer">\n    <el-button @click="dialogClose(editFormRef)">取消</el-button>\n    <el-button type="primary" @click="submitForm(editFormRef)" :loading="buttonLoading">保存\n    </el-button>\n  </div>\n</el-dialog>\n​\n<script lang="ts" setup>\n/**\n * 新增编辑及修改密码弹窗\n */\n// 新增编辑及修改密码弹窗变量及方法\nlet title = ref(\'\')\nlet dialogFormVisible = ref(false)\nconst editFormRef = ref<FormInstance>()\n// 表单校验\n// 验证密码\nconst validateOldPwd = (rule: any, value: any, callback: any) => {\n  if (value === \'\') {\n    callback(new Error(\'请输入原密码\'))\n  } else if (value.length < 6) {\n    callback(new Error(\'密码长度不能小于6\'))\n  } else {\n    callback()\n  }\n}\n// 验证密码\nconst validatePwd = (rule: any, value: any, callback: any) => {\n  if (value === \'\') {\n    callback(new Error(\'请输入密码\'))\n  } else if (value.length < 6) {\n    callback(new Error(\'密码长度不能小于6\'))\n  } else {\n    callback()\n  }\n}\n// 二次验证密码\nconst validateRePwd = (rule: any, value: any, callback: any) => {\n  if (value === \'\') {\n    callback(new Error(\'请再次输入密码\'))\n  } else if (value !== form.password) {\n    callback(new Error(\'两次输入密码不一致!\'))\n  } else {\n    callback()\n  }\n}\nconst rules = reactive({\n  username: [\n    { required: true, message: \'帐号不能为空\', trigger: \'blur\' },\n    { min: 3, max: 12, message: \'帐号长度3-12之内\', trigger: \'blur\' },\n    { pattern: /^[a-zA-Z0-9]+$/, message: \'帐号只能字母数字组成\', trigger: \'blur\' }\n  ],\n  role_ids: [\n    { required: true, message: \'请选择角色\', trigger: \'change\', type: \'array\' }\n  ],\n  old_password: [{ validator: validateOldPwd, trigger: \'blur\' }],\n  password: [{ validator: validatePwd, trigger: \'blur\' }],\n  repassword: [{ validator: validateRePwd, trigger: \'blur\' }]\n})\n// 弹窗表单对象\nconst form = reactive<userEditForm>({\n  user_id: 0,\n  action: \'\',\n  username: \'\',\n  old_password: \'\',\n  password: \'\',\n  repassword: \'\',\n  status: 0,\n  role_ids: []\n})\nconst roles = ref([] as RoleItem[])\nconst buttonLoading = ref(false)\nconst getRoles = () => {\n  allRole().then(res => {\n    roles.value = res.data\n  })\n}\n// 将form对象初始化\nconst reset = () => {\n  form.user_id = 0\n  form.action = \'\'\n  form.username = \'\'\n  form.old_password = \'\'\n  form.password = \'\'\n  form.repassword = \'\'\n  form.status = 0\n  form.role_ids = []\n}\n// 重置表单方法\nconst resetQuery = (formEl: FormInstance | undefined) => {\n  queryParams.username = undefined\n  queryParams.status = undefined\n  formEl?.resetFields()\n  getListUser();\n}\nconst dialogClose = (formEl: FormInstance | undefined) => {\n  dialogFormVisible.value = false\n  formEl?.resetFields()\n  reset()\n}\n// 点击新增，重置表单并显示\nconst handleAdd = () => {\n  title.value = "添加用户"\n  reset()\n  dialogFormVisible.value = true\n}\n// 点击重置密码：根据id获取用户数据并传递action字段\nconst handleReset = (user_id: number) => {\n  loading.value = true\n  reset()\n  getUserInfoById(user_id).then(res => {\n    loading.value = false\n    form.user_id = res.data.user_id\n    form.action = "edit-pwd"\n    dialogFormVisible.value = true\n    title.value = "重置密码"\n  })\n}\n// 点击编辑按钮：清空表单，根据id获取用户数据\nconst handleEdit = (user_id: number) => {\n  loading.value = true\n  reset()\n  getUserInfoById(user_id).then(res => {\n    loading.value = false\n    form.user_id = res.data.user_id\n    form.username = res.data.username\n    form.status = res.data.status\n    form.role_ids = res.data.roles.map((item: RoleItem) => {\n      if (item.role_id) {\n        return item.role_id\n      }\n    })\n    dialogFormVisible.value = true\n    title.value = "编辑用户信息"\n  })\n}\n// 当用户修改自己的密码需要重新登录\nconst reLogin = () => {\n  ElMessageBox.confirm(\'修改成功，请重新登录\', \'重新登录\', {\n    confirmButtonText: \'重新登录\',\n    cancelButtonText: \'取消\',\n    type: \'warning\'\n  }).finally(() => {\n    store.dispatch(\'user/resetToken\').then(() => {\n      location.reload()\n    })\n  })\n}\n// 提交表单，根据action字段和id字段调用对应方法\nconst submitForm = (formEl: FormInstance | undefined) => {\n  if (!formEl) return\n  formEl.validate((valid, fields) => {\n    if (valid) {\n      buttonLoading.value = true\n      if (form.action === \'edit-pwd\') {\n        updatePwd({ user_id: form.user_id, old_password: form.old_password, password: form.password, repassword: form.repassword }).then(res => {\n          console.log(form.user_id, store.state.user.user_id);\n​\n          if (form.user_id === store.state.user.user_id) {\n            reLogin()\n          }\n          ElMessage.success("重置密码成功")\n          dialogClose(editFormRef.value)\n          // 重新获取表格数据\n          getListUser()\n        })\n          .finally(() => {\n            buttonLoading.value = false\n          })\n        return false;\n      }\n      if (form.user_id) {\n        updateUser(form)\n          .then((res) => {\n            ElMessage.success(\'修改用户成功\')\n            // 关闭弹窗\n            dialogClose(editFormRef.value)\n            // 重新获取表格数据\n            getListUser()\n          })\n          .finally(() => {\n            buttonLoading.value = false\n          })\n      } else {\n        addUser(form)\n          .then((res) => {\n            ElMessage.success(\'新增用户成功\')\n            // 关闭弹窗\n            dialogClose(editFormRef.value)\n            // 重新获取表格数据\n            getListUser()\n          })\n          .finally(() => {\n            buttonLoading.value = false\n          })\n      }\n    }\n  })\n}\n<\/script>\n')])])])])}),[],!1,null,null,null);n.default=a.exports}}]);