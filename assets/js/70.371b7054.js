(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{477:function(e,n,t){"use strict";t.r(n);var l=t(2),a=Object(l.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"前言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[e._v("#")]),e._v(" 前言")]),e._v(" "),n("p",[e._v("我们还有一个菜单管理没有完成，这篇文章我们着手来完成。菜单管理主要点是获取到用户权限的树状结构并展示。这个我们可以通过"),n("code",[e._v("element-plus")]),e._v("的组件 table 的树形数据与懒加载来实现。")]),e._v(" "),n("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8bb2666d86064fad8267aac3b4dd8d05~tplv-k3u1fbpfcp-watermark.image?",alt:"img.png",referrerpolicy:"no-referrer"}}),e._v(" "),n("p",[e._v("我们通过"),n("code",[e._v("tree-props")]),e._v("属性来配置子孩子的字段，再通过"),n("code",[e._v("row-key")]),e._v("指定每层数据的 key（唯一标识字段，我们这里指权限 id）")]),e._v(" "),n("h2",{attrs:{id:"树形表格"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#树形表格"}},[e._v("#")]),e._v(" 树形表格")]),e._v(" "),n("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/511ef0ae8fe74747bd92f4d0af095dab~tplv-k3u1fbpfcp-watermark.image?",alt:"img.png",referrerpolicy:"no-referrer"}}),e._v(" "),n("p",[e._v("上图通过树形表格展示出相互嵌套的目录、菜单与按钮。permission 权限标识字段是按钮的标识字段，目录及菜单无此字段。redirect 跳转路由字段同理是目录的唯一字段。树形表格的 html 结构如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('\x3c!-- 数据表格 --\x3e\n<el-table v-loading="loading" :data="menuList" highlight-current-row\n  :tree-props="{ children: \'children\', hasChildren: \'hasChildren\' }" @row-click="handleRowClick" row-key="menu_id"\n  border default-expand-all>\n  <el-table-column label="菜单标题">\n    <template #default="scope">\n      <svg-icon :icon-class="\n        scope.row.icon\n      " />\n      {{ scope.row.title }}\n    </template>\n  </el-table-column>\n  <el-table-column label="路由名称" align="center" prop="name" />\n  <el-table-column label="菜单类型" align="center" width="100">\n    <template #default="scope">\n      <el-tag v-if="scope.row.type === \'C\'" type="warning">目录</el-tag>\n      <el-tag v-if="scope.row.type === \'M\'" type="success">菜单</el-tag>\n      <el-tag v-if="scope.row.type === \'B\'" type="danger">按钮</el-tag>\n    </template>\n  </el-table-column>\n  <el-table-column label="权限标识" align="center" prop="permission" />\n​\n  <el-table-column label="状态" align="center" width="100">\n    <template #default="scope">\n      <el-tag v-if="scope.row.hidden === 0" type="success">显示</el-tag>\n      <el-tag v-else type="info">隐藏</el-tag>\n    </template>\n  </el-table-column>\n​\n  <el-table-column label="排序" align="center" width="80" prop="sort" />\n​\n  <el-table-column label="创建时间" align="center" width="180" prop="create_time">\n  </el-table-column>\n​\n  <el-table-column label="修改时间" align="center" width="180" prop="update_time">\n  </el-table-column>\n​\n  <el-table-column label="操作" align="center" width="180">\n    <template #default="scope">\n      <el-button link type="primary" size="small" v-if="scope.row.type !== \'B\'" v-hasPerm="[\'system:menu:add\']"\n        @click.stop="handleAdd(scope.row)">新增\n      </el-button>\n      <el-button link type="primary" size="small" v-hasPerm="[\'system:menu:edit\']"\n        @click.stop="handleUpdate(scope.row)">\n        修改</el-button>\n      <el-button link type="primary" size="small" v-hasPerm="[\'system:menu:del\']"\n        @click.stop="handleDelete(scope.row)">\n        删除</el-button>\n    </template>\n  </el-table-column>\n</el-table>\n')])])]),n("p",[e._v("接下来是"),n("code",[e._v("js")]),e._v("代码。我们看到"),n("code",[e._v("el-table")]),e._v("标签中有"),n("code",[e._v('@row-click="handleRowClick"')]),e._v("方法主要是在点击当前行获取当前权限的数据对象，例如")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("{\n  menu_id:xx,\n  ...\n  children:xx\n}\n")])])]),n("p",[e._v("然后就是"),n("strong",[e._v("新增、编辑、删除按钮")]),e._v("对应的方法。由于按钮类型无法再有下一级的权限，所以当前行为按钮时隐藏新增按钮，保留修改、删除按钮。除按钮外的所有目录、菜单都能够新增这时候分两种情况。")]),e._v(" "),n("ul",[n("li",[e._v("我们点击最上方工具栏的新增按钮，这时上面的"),n("strong",[e._v("点击当前行的 handleRowClick 方法")]),e._v("就可以获取到当前点击行的对象得到"),n("strong",[e._v("当前行的权限 id")]),e._v("，我们将他传给新增方法就可以新增当前行的孩子。")]),e._v(" "),n("li",[e._v("直接在树形表格中点击。我们直接通过插槽"),n("code",[e._v("scope.row.menu_id")]),e._v("获取即可新增当前行的孩子。")])]),e._v(" "),n("p",[n("strong",[e._v("编辑")]),e._v("方法我们点击编辑后根据权限 id 请求获取权限的信息渲染到弹窗的表单中")]),e._v(" "),n("p",[e._v("但我们首先需要一个弹窗和表单，以满足新增和编辑的需要。"),n("code",[e._v("html结构")]),e._v("代码如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('\x3c!-- 新增、编辑弹窗 --\x3e\n<el-dialog :title="dialog.title" v-model="dialog.visible" @close="cancel" width="750px">\n  <el-form ref="dataFormRef" :model="formData" :rules="rules" label-width="100px">\n    <el-form-item label="父级菜单" prop="parent_id">\n      <el-tree-select v-model="formData.parent_id" placeholder="选择上级菜单" :data="menuOptions" filterable\n        check-strictly :render-after-expand="false" />\n    </el-form-item>\n​\n    <el-form-item label="菜单标题" prop="title">\n      <el-input v-model="formData.title" placeholder="请输入菜单或按钮的名称" />\n    </el-form-item>\n​\n    <el-form-item label="菜单类型" prop="type">\n      <el-radio-group v-model="formData.type" @change="handleMenuTypeChange">\n        <el-radio label="C">目录</el-radio>\n        <el-radio label="M">菜单</el-radio>\n        <el-radio label="B">按钮</el-radio>\n      </el-radio-group>\n    </el-form-item>\n​\n    <el-form-item label="路由名称" prop="name" v-if="formData.type === \'M\'">\n      <el-input v-model="formData.name" placeholder="请输入路由名称" />\n    </el-form-item>\n​\n    <el-form-item label="路由路径" prop="path" v-if="formData.type !== \'B\'">\n      <el-input v-if="formData.type == \'C\'" v-model="formData.path" placeholder="/system  (目录以/开头)" />\n      <el-input v-else v-model="formData.path" placeholder="user" />\n    </el-form-item>\n​\n    \x3c!-- 组件页面完整路径 --\x3e\n    <el-form-item v-if="formData.type == \'M\'" label="页面路径" prop="component">\n      <el-input v-model="formData.component" placeholder="/system/user/index" style="width: 95%">\n        <template v-if="formData.parent_id != 0" #prepend>src/views/</template>\n        <template v-if="formData.parent_id != 0" #append>.vue</template>\n      </el-input>\n    </el-form-item>\n​\n    \x3c!-- 权限标识 --\x3e\n    <el-form-item v-if="formData.type === \'B\'" label="权限标识" prop="permisson">\n      <el-input v-model="formData.permission" placeholder="sys:user:add" />\n    </el-form-item>\n​\n    <el-form-item label="图标" prop="icon" v-if="formData.type !== \'B\'">\n      <el-popover ref="popoverRef" placement="bottom-start" :width="570" trigger="click">\n        <template #reference>\n          <el-input v-model="formData.icon" placeholder="点击选择图标" readonly @click="iconSelectVisible = true">\n            <template #prefix>\n              <svg-icon :icon-class="formData.icon" />\n            </template>\n          </el-input>\n        </template>\n​\n        <icon-select @selected="selected" />\n      </el-popover>\n    </el-form-item>\n​\n    <el-form-item label="跳转路由" v-if="formData.type == \'C\'">\n      <el-input v-model="formData.redirect" placeholder="跳转路由" />\n    </el-form-item>\n​\n    <el-form-item label="状态" v-if="formData.type !== \'B\'">\n      <el-radio-group v-model="formData.hidden">\n        <el-radio :label="0">显示</el-radio>\n        <el-radio :label="1">隐藏</el-radio>\n      </el-radio-group>\n    </el-form-item>\n​\n    <el-form-item label="排序" prop="sort">\n      <el-input-number v-model="formData.sort" style="width: 100px" controls-position="right" :min="0" />\n    </el-form-item>\n  </el-form>\n​\n  <template #footer>\n    <div class="dialog-footer">\n      <el-button type="primary" @click="submitForm">确 定</el-button>\n      <el-button @click="cancel">取 消</el-button>\n    </div>\n  </template>\n</el-dialog>\n')])])]),n("p",[e._v("然后再写 js 代码基本上我们就是获取权限 id 调用对应接口即可，以下为完整代码")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<template>\n  <div class="content-title">菜单管理</div>\n  <div class="content-container">\n    \x3c!-- 搜索表单 --\x3e\n    <el-form class="table-Handler" ref="queryFormRef" :model="queryParams" :inline="true">\n      <el-form-item>\n        <el-button color="#3c8dbc" :icon="CirclePlus" v-hasPerm="[\'system:menu:add\']" @click="handleAdd">新增</el-button>\n      </el-form-item>\n​\n      <el-form-item prop="title" v-hasPerm="[\'system:menu:query\']" label="菜单标题">\n        <el-input v-model="queryParams.title" placeholder="菜单标题" clearable @keyup.enter="handleQuery" />\n      </el-form-item>\n      <el-form-item>\n        <el-button color="#3c8dbc" :icon="Search" v-hasPerm="[\'system:menu:query\']" @click="handleQuery">搜索</el-button>\n        <el-button color="#3c8dbc" :icon="Refresh" v-hasPerm="[\'system:menu:query\']" @click="resetQuery">重置</el-button>\n      </el-form-item>\n    </el-form>\n​\n    \x3c!-- 数据表格 --\x3e\n    <el-table v-loading="loading" :data="menuList" highlight-current-row\n      :tree-props="{ children: \'children\', hasChildren: \'hasChildren\' }" @row-click="handleRowClick" row-key="menu_id"\n      border default-expand-all>\n      <el-table-column label="菜单标题">\n        <template #default="scope">\n          <svg-icon :icon-class="\n            scope.row.icon\n          " />\n          {{ scope.row.title }}\n        </template>\n      </el-table-column>\n      <el-table-column label="路由名称" align="center" prop="name" />\n      <el-table-column label="菜单类型" align="center" width="100">\n        <template #default="scope">\n          <el-tag v-if="scope.row.type === \'C\'" type="warning">目录</el-tag>\n          <el-tag v-if="scope.row.type === \'M\'" type="success">菜单</el-tag>\n          <el-tag v-if="scope.row.type === \'B\'" type="danger">按钮</el-tag>\n        </template>\n      </el-table-column>\n      <el-table-column label="权限标识" align="center" prop="permission" />\n​\n      <el-table-column label="状态" align="center" width="100">\n        <template #default="scope">\n          <el-tag v-if="scope.row.hidden === 0" type="success">显示</el-tag>\n          <el-tag v-else type="info">隐藏</el-tag>\n        </template>\n      </el-table-column>\n​\n      <el-table-column label="排序" align="center" width="80" prop="sort" />\n​\n      <el-table-column label="创建时间" align="center" width="180" prop="create_time">\n      </el-table-column>\n​\n      <el-table-column label="修改时间" align="center" width="180" prop="update_time">\n      </el-table-column>\n​\n      <el-table-column label="操作" align="center" width="180">\n        <template #default="scope">\n          <el-button link type="primary" size="small" v-if="scope.row.type !== \'B\'" v-hasPerm="[\'system:menu:add\']"\n            @click.stop="handleAdd(scope.row)">新增\n          </el-button>\n          <el-button link type="primary" size="small" v-hasPerm="[\'system:menu:edit\']"\n            @click.stop="handleUpdate(scope.row)">\n            修改</el-button>\n          <el-button link type="primary" size="small" v-hasPerm="[\'system:menu:del\']"\n            @click.stop="handleDelete(scope.row)">\n            删除</el-button>\n        </template>\n      </el-table-column>\n    </el-table>\n​\n    \x3c!-- 新增、编辑弹窗 --\x3e\n    <el-dialog :title="dialog.title" v-model="dialog.visible" @close="cancel" width="750px">\n      <el-form ref="dataFormRef" :model="formData" :rules="rules" label-width="100px">\n        <el-form-item label="父级菜单" prop="parent_id">\n          <el-tree-select v-model="formData.parent_id" placeholder="选择上级菜单" :data="menuOptions" filterable\n            check-strictly :render-after-expand="false" />\n        </el-form-item>\n​\n        <el-form-item label="菜单标题" prop="title">\n          <el-input v-model="formData.title" placeholder="请输入菜单或按钮的名称" />\n        </el-form-item>\n​\n        <el-form-item label="菜单类型" prop="type">\n          <el-radio-group v-model="formData.type" @change="handleMenuTypeChange">\n            <el-radio label="C">目录</el-radio>\n            <el-radio label="M">菜单</el-radio>\n            <el-radio label="B">按钮</el-radio>\n          </el-radio-group>\n        </el-form-item>\n​\n        <el-form-item label="路由名称" prop="name" v-if="formData.type === \'M\'">\n          <el-input v-model="formData.name" placeholder="请输入路由名称" />\n        </el-form-item>\n​\n        <el-form-item label="路由路径" prop="path" v-if="formData.type !== \'B\'">\n          <el-input v-if="formData.type == \'C\'" v-model="formData.path" placeholder="/system  (目录以/开头)" />\n          <el-input v-else v-model="formData.path" placeholder="user" />\n        </el-form-item>\n​\n        \x3c!-- 组件页面完整路径 --\x3e\n        <el-form-item v-if="formData.type == \'M\'" label="页面路径" prop="component">\n          <el-input v-model="formData.component" placeholder="/system/user/index" style="width: 95%">\n            <template v-if="formData.parent_id != 0" #prepend>src/views/</template>\n            <template v-if="formData.parent_id != 0" #append>.vue</template>\n          </el-input>\n        </el-form-item>\n​\n        \x3c!-- 权限标识 --\x3e\n        <el-form-item v-if="formData.type === \'B\'" label="权限标识" prop="permisson">\n          <el-input v-model="formData.permission" placeholder="sys:user:add" />\n        </el-form-item>\n​\n        <el-form-item label="图标" prop="icon" v-if="formData.type !== \'B\'">\n          <el-popover ref="popoverRef" placement="bottom-start" :width="570" trigger="click">\n            <template #reference>\n              <el-input v-model="formData.icon" placeholder="点击选择图标" readonly @click="iconSelectVisible = true">\n                <template #prefix>\n                  <svg-icon :icon-class="formData.icon" />\n                </template>\n              </el-input>\n            </template>\n​\n            <icon-select @selected="selected" />\n          </el-popover>\n        </el-form-item>\n​\n        <el-form-item label="跳转路由" v-if="formData.type == \'C\'">\n          <el-input v-model="formData.redirect" placeholder="跳转路由" />\n        </el-form-item>\n​\n        <el-form-item label="状态" v-if="formData.type !== \'B\'">\n          <el-radio-group v-model="formData.hidden">\n            <el-radio :label="0">显示</el-radio>\n            <el-radio :label="1">隐藏</el-radio>\n          </el-radio-group>\n        </el-form-item>\n​\n        <el-form-item label="排序" prop="sort">\n          <el-input-number v-model="formData.sort" style="width: 100px" controls-position="right" :min="0" />\n        </el-form-item>\n      </el-form>\n​\n      <template #footer>\n        <div class="dialog-footer">\n          <el-button type="primary" @click="submitForm">确 定</el-button>\n          <el-button @click="cancel">取 消</el-button>\n        </div>\n      </template>\n    </el-dialog>\n  </div>\n</template>\n​\n<script lang="ts">\nexport default { name: \'Menu\' };\n<\/script>\n​\n<script setup lang="ts">\nimport { reactive, ref, onMounted, toRefs } from \'vue\';\n​\nimport { Search, CirclePlus, Edit, Refresh, Delete } from \'@element-plus/icons-vue\';\nimport { ElForm, ElMessage, ElMessageBox, ElPopover } from \'element-plus\';\n​\n// API 依赖\nimport {\n  listMenus,\n  getMenuDetail,\n  listMenuOptions,\n  addMenu,\n  deleteMenus,\n  updateMenu\n} from \'@/utils/Api/user/menu\';\n​\nimport SvgIcon from \'@/components/SvgIcon/index.vue\';\nimport IconSelect from \'@/components/IconSelect/index.vue\';\n​\nconst queryFormRef = ref(ElForm);\nconst dataFormRef = ref(ElForm);\nconst popoverRef = ref(ElPopover);\n​\nconst state = reactive({\n  loading: true,\n  // 非单个禁用\n  single: true,\n  // 非多个禁用\n  multiple: true,\n  queryParams: {} as MenuQueryParam,\n  menuList: [] as MenuItem[],\n  dialog: { visible: false } as Dialog,\n  formData: {\n    parent_id: 0,\n    title: \'\',\n    name: undefined,\n    hidden: 0,\n    sort: 1,\n    component: undefined,\n    path: undefined,\n    type: \'C\',\n    permission: undefined,\n    redirect: undefined\n  } as MenuFormData,\n  rules: {\n    parent_id: [{ required: true, message: \'请选择顶级菜单\', trigger: \'blur\' }],\n    title: [{ required: true, message: \'请输入菜单标题\', trigger: \'blur\' }],\n    name: [{ required: true, message: \'请输入路由名称\', trigger: \'blur\' }],\n    type: [{ required: true, message: \'请选择菜单类型\', trigger: \'blur\' }],\n    path: [{ required: true, message: \'请输入路由路径\', trigger: \'blur\' }],\n    component: [\n      { required: true, message: \'请输入组件完整路径\', trigger: \'blur\' }\n    ]\n  },\n  menuOptions: [] as Option[],\n  currentRow: undefined,\n  // Icon选择器显示状态\n  iconSelectVisible: false,\n  cacheData: {\n    menuType: \'\',\n    menuPath: \'\'\n  }\n});\n​\nconst {\n  loading,\n  queryParams,\n  menuList,\n  dialog,\n  formData,\n  rules,\n  menuOptions,\n  iconSelectVisible,\n  cacheData\n} = toRefs(state);\n​\n/**\n * 查询\n */\nfunction handleQuery() {\n  // 重置父组件\n  state.loading = true;\n  listMenus(state.queryParams).then(({ data }) => {\n    state.menuList = data;\n    state.loading = false;\n  });\n}\n​\n/**\n * 加载菜单下拉树\n */\nasync function loadMenuData() {\n  const menuOptions: any[] = [];\n  await listMenuOptions().then(({ data }) => {\n    const menuOption = { value: 0, label: \'顶级菜单\', children: data };\n    menuOptions.push(menuOption);\n    state.menuOptions = menuOptions;\n  });\n}\n​\n/**\n * 重置查询\n */\nfunction resetQuery() {\n  queryFormRef.value.resetFields();\n  handleQuery();\n}\n​\nfunction handleRowClick(row: any) {\n  // 点击后将获得当前行的对象\n  state.currentRow = JSON.parse(JSON.stringify(row));\n}\n​\n/**\n * 新增菜单打开\n */\nasync function handleAdd(row: any) {\n  formData.value.menu_id = undefined;\n  await loadMenuData();\n  dialog.value = {\n    title: \'添加菜单\',\n    visible: true\n  };\n​\n  if (row.menu_id) {\n    // 行点击新增\n​\n    formData.value.parent_id = row.menu_id;\n  } else {\n    // 工具栏新增\n​\n    if (state.currentRow) {\n      // 选择行\n      formData.value.parent_id = (state.currentRow as any).menu_id;\n    } else {\n      // 未选择行\n      formData.value.parent_id = 0;\n    }\n  }\n}\n​\n/**\n * 编辑菜单\n */\nasync function handleUpdate(row: MenuFormData) {\n  await loadMenuData();\n  state.dialog = {\n    title: \'编辑菜单\',\n    visible: true\n  };\n  const id = row.menu_id as number;\n  getMenuDetail(id).then(({ data }) => {\n    state.formData = data;\n    cacheData.value.menuType = data.type;\n    cacheData.value.menuPath = data.path;\n  });\n}\n​\n/**\n * 菜单类型 change\n */\nfunction handleMenuTypeChange(menuType: any) {\n  if (menuType !== cacheData.value.menuType) {\n    formData.value.path = undefined;\n  } else {\n    formData.value.path = cacheData.value.menuPath;\n  }\n}\n​\n/**\n * 菜单提交\n */\nfunction submitForm() {\n  dataFormRef.value.validate((isValid: boolean) => {\n    if (isValid) {\n      if (state.formData.type !== \'B\') {\n        formData.value.permission = undefined\n        if (state.formData.type === \'M\') {\n          formData.value.redirect = undefined;\n        }\n      } else {\n        formData.value.name = undefined\n        formData.value.component = undefined\n        formData.value.path = undefined\n        formData.value.redirect = undefined\n      }\n      if (state.formData.menu_id) {\n        updateMenu(state.formData.menu_id, state.formData).then(() => {\n          ElMessage.success(\'修改成功\');\n          cancel();\n          handleQuery();\n        });\n      } else {\n        addMenu(state.formData).then(() => {\n          ElMessage.success(\'新增成功\');\n          cancel();\n          handleQuery();\n        });\n      }\n    }\n  });\n}\n​\n/**\n * 删除菜单\n *\n * @param row\n */\nfunction handleDelete(row: any) {\n  const id = row.menu_id;\n  ElMessageBox.confirm(\'确认删除已选中的数据项?\', \'警告\', {\n    confirmButtonText: \'确定\',\n    cancelButtonText: \'取消\',\n    type: \'warning\'\n  })\n    .then(() => {\n      deleteMenus({ menu_id: id }).then(() => {\n        ElMessage.success(\'删除成功\');\n        handleQuery();\n      });\n    })\n    .catch(() => ElMessage.info(\'已取消删除\'));\n}\n​\n/**\n * 取消关闭弹窗\n */\nfunction cancel() {\n  dataFormRef.value.resetFields();\n  reset()\n  state.dialog.visible = false;\n}\n/**\n * 重置表单\n */\nfunction reset() {\n  formData.value.parent_id = 0\n  formData.value.title = \'\'\n  formData.value.name = undefined\n  formData.value.hidden = 0\n  formData.value.component = undefined\n  formData.value.path = undefined\n  formData.value.permission = undefined\n  formData.value.redirect = undefined\n}\n/**\n * 选择图标后事件\n */\nfunction selected(name: string) {\n  state.formData.icon = name;\n  state.iconSelectVisible = false;\n}\n​\nonMounted(() => {\n  handleQuery();\n});\n<\/script>\n​\n')])])]),n("h2",{attrs:{id:"写在最后"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#写在最后"}},[e._v("#")]),e._v(" 写在最后")]),e._v(" "),n("p",[e._v("那么，我们的"),n("code",[e._v("vue3+ts+nodeJs通用后台管理系统")]),e._v("到这里就完成了，大家可以在此基础上进行改动扩展，希望大家在此系统中有所学习、有所感悟！Respect~")]),e._v(" "),n("p",[e._v("下面是系统的 github 地址")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://github.com/Alan-222/-Vue3_Ts_NodeJs_management_system_client",target:"_blank",rel:"noopener noreferrer"}},[e._v("vue3+ts 前端"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"https://github.com/Alan-222/Vue3_Ts_NodeJs_management_system_server",target:"_blank",rel:"noopener noreferrer"}},[e._v("nodeJs 后端"),n("OutboundLink")],1)])])}),[],!1,null,null,null);n.default=a.exports}}]);