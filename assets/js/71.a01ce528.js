(window.webpackJsonp=window.webpackJsonp||[]).push([[71],{475:function(e,t,r){"use strict";r.r(t);var n=r(2),s=Object(n.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"前言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[e._v("#")]),e._v(" 前言")]),e._v(" "),t("p",[e._v("前面我们几乎实现了用户模块的所有路由接口，剩下的几个接口大同小异，都是获取 id 后对数据库进行对应的操作。我们再来看看总共有多少用户接口。")]),e._v(" "),t("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5066b4e36a5648e096b5516a177edc5d~tplv-k3u1fbpfcp-watermark.image?",alt:"img.png",referrerpolicy:"no-referrer"}}),e._v(" "),t("blockquote",[t("p",[e._v("若有疑问，可到我的"),t("a",{attrs:{href:"https://github.com/Alan-222/Vue3-ts-node.js-management-system",target:"_blank",rel:"noopener noreferrer"}},[e._v("github 仓库"),t("OutboundLink")],1),e._v("查看代码，有 vue 前端和 node.js 后端两个文件夹。后端所用到数据校验的模块是 express-joi（中间件），以及一些名称与本系统不一致。其它基本一致。")])]),e._v(" "),t("h2",{attrs:{id:"角色模型实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#角色模型实现"}},[e._v("#")]),e._v(" 角色模型实现")]),e._v(" "),t("p",[e._v("接下来我们再来进行角色模块。首先我们得明确本系统用户与角色的关系：多用户对多角色")]),e._v(" "),t("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b7716300f3624f7fa36e83e968454882~tplv-k3u1fbpfcp-watermark.image?",alt:"img.png",referrerpolicy:"no-referrer"}}),e._v(" "),t("p",[e._v("接下来我们便可依此而建表。建立一个角色表，因为一对多的关系需要多建一个联结表来存储用户的角色信息。")]),e._v(" "),t("h3",{attrs:{id:"建立数据表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#建立数据表"}},[e._v("#")]),e._v(" 建立数据表")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("SET NAMES utf8mb4;\nSET FOREIGN_KEY_CHECKS = 0;\n-- ----------------------------\n-- Table structure for roles\n-- ----------------------------\nDROP TABLE IF EXISTS `roles`;\nCREATE TABLE `roles`  (\n  `role_id` int UNSIGNED NOT NULL AUTO_INCREMENT,\n  `role_name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '角色名称',\n  `remark` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '备注',\n  `status` tinyint NOT NULL DEFAULT 0 COMMENT '状态',\n  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',\n  `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',\n  PRIMARY KEY (`role_id`, `role_name`) USING BTREE\n) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = DYNAMIC;\n​\n-- ----------------------------\n-- Table structure for users_roles\n-- ----------------------------\nDROP TABLE IF EXISTS `users_roles`;\nCREATE TABLE `users_roles`  (\n  `user_role_id` int UNSIGNED NOT NULL AUTO_INCREMENT,\n  `role_id` int NOT NULL COMMENT '角色ID',\n  `user_id` int NOT NULL COMMENT '用户ID',\n  `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',\n  PRIMARY KEY (`user_role_id`) USING BTREE\n) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = DYNAMIC;\n​\nSET FOREIGN_KEY_CHECKS = 1;\n")])])]),t("p",[e._v("我们利用 users_roles 表可以通过表中两个字段 user_id 以及 role_id 建立联结")]),e._v(" "),t("h3",{attrs:{id:"利用-sequelize-实现-orm"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#利用-sequelize-实现-orm"}},[e._v("#")]),e._v(" 利用 sequelize 实现 orm")]),e._v(" "),t("p",[e._v("还是和用户模型一样，通过 sequelize 的 define 方法一一映射数据库中两个表的字段，注意类型对应上即可。")]),e._v(" "),t("p",[t("strong",[e._v("model/roles.js")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const Sequelize = require('sequelize');\nconst moment = require('moment');\nconst sequelize = require('./init');\n​\n// 定义表的模型\nconst RolesModel = sequelize.define('roles', {\n  role_id: {\n    type: Sequelize.INTEGER,\n    primaryKey: true,\n    autoIncrement: true\n  },\n  role_name: {\n    type: Sequelize.STRING(255)\n  },\n  remark: {\n    type: Sequelize.STRING(255)\n  },\n  status: {\n    type: Sequelize.TINYINT,\n    defaultValue: 0\n  },\n  update_time: {\n    type: Sequelize.DATE,\n    get() {\n      return this.getDataValue('update_time')\n        ? moment(this.getDataValue('update_time')).format('YYYY-MM-DD HH:mm:ss')\n        : null;\n    }\n  },\n  create_time: {\n    type: Sequelize.DATE,\n    defaultValue: Sequelize.NOW,\n    get() {\n      return moment(this.getDataValue('create_time')).format('YYYY-MM-DD HH:mm:ss');\n    }\n  }\n});\n​\nmodule.exports = RolesModel;\n")])])]),t("p",[t("strong",[e._v("model/users_roles.js")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const Sequelize = require('sequelize')\nconst moment = require('moment')\nconst sequelize = require('./init')\n​\n// 定义表的模型\nconst UsresRolesModel = sequelize.define('users_roles', {\n  user_role_id: {\n    type: Sequelize.INTEGER,\n    primaryKey: true,\n    autoIncrement: true\n  },\n  role_id: {\n    type: Sequelize.INTEGER\n  },\n  user_id: {\n    type: Sequelize.INTEGER\n  },\n  create_time: {\n    type: Sequelize.DATE,\n    defaultValue: Sequelize.NOW,\n    get() {\n      return moment(this.getDataValue('create_time')).format('YYYY-MM-DD HH:mm:ss')\n    }\n  }\n})\n​\nmodule.exports = UsresRolesModel\n")])])]),t("h3",{attrs:{id:"建立联结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#建立联结"}},[e._v("#")]),e._v(" 建立联结")]),e._v(" "),t("p",[e._v("但我们要怎么在三个模型（用户模型、角色模型、用户角色模型）之间建立联结呢。我们可以在"),t("a",{attrs:{href:"https://www.sequelize.cn/core-concepts/assocs",target:"_blank",rel:"noopener noreferrer"}},[e._v("sequelize 中文文档"),t("OutboundLink")],1),e._v("中看到有很多定义二者关系的方法。而我们的用户是属于多个角色的，通过用户角色模型来联结。所以我们用 belongsToMany 方法。")]),e._v(" "),t("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f45c344bc2a84368af7a36259fb3f17b~tplv-k3u1fbpfcp-watermark.image?",alt:"img.png",referrerpolicy:"no-referrer"}}),e._v(" "),t("p",[t("strong",[e._v("model/user.js")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 导入角色模型\nconst RolesModel = require('./roles');\n// 导入用户角色模型\nconst UsersRolesModel = require('./users-roles');\n...\nUsersModel.belongsToMany(RolesModel, {\n  through: {\n    model: UsersRolesModel\n  },\n  foreignKey: 'user_id',\n  otherKey: 'role_id'\n});\n​\nmodule.exports=UsersModel\n")])])]),t("p",[e._v("这样就建立好了联结关系。")]),e._v(" "),t("p",[e._v("但是，我们之前的用户接口中，是不是都没有建立与角色信息的关联。所以我们将在下文改造接口来进行关联。")])])}),[],!1,null,null,null);t.default=s.exports}}]);