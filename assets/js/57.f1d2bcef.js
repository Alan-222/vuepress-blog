(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{463:function(e,s,r){"use strict";r.r(s);var n=r(2),t=Object(n.a)({},(function(){var e=this,s=e._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h2",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[e._v("#")]),e._v(" 前言")]),e._v(" "),s("p",[e._v("前面已经将用户模型与角色模型做了关联。但是用户接口添加及返回的信息还不包含角色，所以接下来我们将对用户接口进行改造。")]),e._v(" "),s("h2",{attrs:{id:"改造接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#改造接口"}},[e._v("#")]),e._v(" 改造接口")]),e._v(" "),s("h3",{attrs:{id:"添加用户接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#添加用户接口"}},[e._v("#")]),e._v(" 添加用户接口")]),e._v(" "),s("p",[e._v("添加用户的时候也要添加用户所选择的角色信息。所以我们在模型定义的文件中为模型添加方法，从而达到添加用户角色的目的。")]),e._v(" "),s("blockquote",[s("p",[s("strong",[e._v("添加用户角色的重点：")]),e._v(" 添加用户角色方法应当有两个操作： 1.添加用户的信息，2.在用户角色表添加用户的角色信息。但这里有一个问题，万一我们添加用户信息成功了，但添加用户的角色没有成功，添加用户信息是否是错误的、不应该的？所以下面的代码我用到了"),s("a",{attrs:{href:"https://www.sequelize.cn/other-topics/transactions",target:"_blank",rel:"noopener noreferrer"}},[e._v("sequelize 的事务"),s("OutboundLink")],1),e._v("的概念。这里要是有一个操作没有成功就会回滚（即所有操作都不做），要所有操作都成功才提交。")])]),e._v(" "),s("p",[s("strong",[e._v("model/user.js")])]),e._v(" "),s("p",[e._v("我们添加角色的第一步为添加用户，然后再读取传来的角色 id 数组，遍历后再添加到用户角色表")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("...\nconst UserModel=sequelize.define(...)\n// 添加用户的方法\nUsersModel.addUser = async function (data) {\n  // 首先,我们开始一个事务并将其保存到变量中\n  const t = await sequelize.transaction();\n  try {\n    // 然后,我们进行一些调用以将此事务作为参数传递:\n    // 添加用户\n    const user = await UsersModel.create(data);\n    // 遍历前端传来的用户角色id并添加到用户角色表\n    const users_roles = data.role_ids.map(function (role_id) {\n      return {\n        user_id: user.user_id,\n        role_id: role_id\n      };\n    });\n    await UsersRolesModel.bulkCreate(users_roles);\n    // 我们提交事务.\n    t.commit();\n    return true;\n  } catch (e) {\n    // 如果执行到达此行,则抛出错误.\n    // 我们回滚事务.\n    t.rollback();\n    return e.message;\n  }\n};\n...\n")])])]),s("p",[e._v("然后我们修改一下校验规则文件（添加 id 数组的校验）和添加用户路由回调函数。")]),e._v(" "),s("p",[s("strong",[e._v("schema/user.js")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const role_ids = joi.array().items(joi.number()).required();\n// 添加用户接口\nexports.add_user_schema = joi.object().keys({\n  username,\n  password,\n  role_ids\n});\n")])])]),s("p",[s("strong",[e._v("router_handler/user.js")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" ...\n const password = value.password;\n  // 加密\n  value.password = bcrypt.hashSync(password, 10);\n  // 将添加的用户设置为可用\n  value.status = 1;\n  // 添加用户角色，返回true或错误信息\n  const result = UsersModel.addUser(value);\n  result.then(function (ret) {\n    if (ret=== true) {\n      return res.send({\n        code: 0,\n        message: '新增成功',\n        data: ret\n      });\n    }\n  })\n ...\n")])])]),s("h3",{attrs:{id:"修改角色接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#修改角色接口"}},[e._v("#")]),e._v(" 修改角色接口")]),e._v(" "),s("p",[e._v("修改角色方法与添加角色方法基本一致，要做到修改用户的角色时能够修改用户角色表的数据。")]),e._v(" "),s("p",[e._v("但前端传来了一个角色数组，我们得先从用户角色表中取出用户的角色数据将其转为数组，然后比较两个数组再对应进行修改。例如前端传来的角色数组为[1,2]，表里例如所存字段信息的是")]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",[e._v("user_id")]),e._v(" "),s("th",[e._v("role_id")])])]),e._v(" "),s("tbody",[s("tr",[s("td",[e._v("1")]),e._v(" "),s("td",[e._v("1")])]),e._v(" "),s("tr",[s("td",[e._v("1")]),e._v(" "),s("td",[e._v("3")])])])]),e._v(" "),s("p",[e._v("那么数据库所存的角色信息数组就是[1,3]，我们应当将 3 的角色删掉然后添加 2 的角色。")]),e._v(" "),s("p",[e._v("那么我们得要获得两个数组的差集。我们用到的是数组的"),s("strong",[e._v("filter 方法")]),e._v("过滤出交集")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// 测试！！！\nlet arr1 = [1,2,3];\nlet arr2 = [1,3,4];\nlet arr3=arr1.filter(function (v) {\n  return arr2.indexOf(v) === -1;\n});\nlet arr4 = arr2.filter(function (v) {\n  return arr1.indexOf(v) === -1;\n});\nconsole.log(arr3);   //    得到[2]为添加的角色数组\nconsole.log(arr4);   //    得到[4]为数据库中要删除的角色数组\n")])])]),s("p",[e._v("我们在 utils 文件夹下新建一个工具类来定义此数组方法。")]),e._v(" "),s("p",[s("strong",[e._v("utils/tools.js")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("/**\n * 获取两个数组差集\n * @param arr1\n * @param arr2\n * @returns {*[]}\n */\nconst minustArr = function (arr1 = [], arr2 = []) {\n  return arr1.filter(function (v) {\n    return arr2.indexOf(v) === -1;\n  });\n};\n// 导出工具方法\nmodule.exports = {\n  minustArr\n};\n")])])]),s("p",[e._v("那么我们就可以进行修改角色方法的编写了")]),e._v(" "),s("p",[s("strong",[e._v("model/user.js")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const tools=require('../utils/tools')\n...\nUsersModel.addUser...\nUsersModel.updateUser = async function (user_id, data) {\n  const t = await sequelize.transaction();\n  try {\n    // 获得修改时间\n    data.update_time = new Date();\n    // 先更新用户\n    await UsersModel.update(data, {\n      where: {\n        user_id: user_id\n      }\n    });\n    // 再得到用户角色表中此用户的角色id\n    const users_roles = await UsersRolesModel.findAll({\n      where: { user_id: user_id }\n    });\n    // 将表中获得的角色id转换为数组\n    const role_ids = users_roles.map(function (item) {\n      return item.role_id;\n    });\n    // 新加的角色加到用户角色表中\n    const add_role_ids = tools.minustArr(data.role_ids, role_ids);\n    const add_users_roles = add_role_ids.map(function (role_id) {\n      return { user_id: user_id, role_id: role_id };\n    });\n    await UsersRolesModel.bulkCreate(add_users_roles);\n    // 删除的角色从用户角色表删除\n    const del_role_ids = tools.minustArr(role_ids, data.role_ids);\n    if (del_role_ids && del_role_ids.length > 0) {\n      await UsersRolesModel.destroy({\n        where: {\n          user_id: user_id,\n          role_id: del_role_ids\n        }\n      });\n    }\n    t.commit();\n    return true;\n  } catch (e) {\n    t.rollback();\n    return e.message;\n  }\n};\n...\n")])])]),s("p",[e._v("然后同样对校验字段和路由回调函数进行修改。")]),e._v(" "),s("p",[s("strong",[e._v("schema/user.js")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// 更新用户接口\nexports.update_user_schema = joi.object().keys({\n  username: joi.string().alphanum().min(1).max(10),\n  status,\n  nickname,\n  email,\n  role_ids     // 角色id数组\n});\n")])])]),s("p",[s("strong",[e._v("router_handler/user.js")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const result = UsersModel.updateUser(user_id, req.body);\nresult.then(function (ret) {\n    if (ret === true) {\n      return res.send({\n        code: 0,\n        message: '修改成功',\n        data: ret\n      });\n    }\n})\n")])])]),s("h3",{attrs:{id:"删除用户接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#删除用户接口"}},[e._v("#")]),e._v(" 删除用户接口")]),e._v(" "),s("p",[e._v("删除用户只需要删除对应用户表的用户和用户角色表该用户 id 对应的表记录即可")]),e._v(" "),s("p",[s("strong",[e._v("model/user.js")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("...\nUsersModel.delUser = async function (user_ids) {\n  const t = await sequelize.transaction();\n  try {\n    await UsersModel.destroy({\n      where: { user_id: user_ids }\n    });\n    await UsersRolesModel.destroy({\n      where: { user_id: user_ids }\n    });\n    t.commit();\n    return true;\n  } catch (e) {\n    t.rollback();\n    return false;\n  }\n};\n...\n")])])]),s("p",[e._v("然后修改回调函数")]),e._v(" "),s("p",[s("strong",[e._v("router_handler/user.js")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("...\n  const user_ids = req.body.user_id;\n  UsersModel.delUser(user_ids || []).then(function (user) {\n    if (user !== true) {\n      return res.send({\n        code: 1,\n        message: '删除失败',\n        data: null\n      });\n    }\n...\n")])])]),s("h3",{attrs:{id:"获取用户列表和根据-id-获取用户信息接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#获取用户列表和根据-id-获取用户信息接口"}},[e._v("#")]),e._v(" 获取用户列表和根据 id 获取用户信息接口")]),e._v(" "),s("p",[e._v("都只需要在获取信息的时候添加上角色信息。在"),s("a",{attrs:{href:"https://www.sequelize.cn/core-concepts/assocs",target:"_blank",rel:"noopener noreferrer"}},[e._v("sequelize 的关联模块"),s("OutboundLink")],1),e._v("中有"),s("code",[e._v("include")]),e._v("参数可以执行预先加载与查询实例一起带回关联的数据。")]),e._v(" "),s("p",[e._v("先导入角色用户模型")]),e._v(" "),s("p",[s("strong",[e._v("router_handler/user.js")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const RolesModel = require('../model/roles');\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("/**\n * 获取用户列表\n */\n ...\n  UsersModel.findAndCountAll({\n    attributes: { exclude: ['password'] },\n    include:[{model:RolesModel}],    // 预先加载角色模型\n    offset: offset,\n    limit: limit,\n    where: where\n  }).then(...)\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" /**\n * 根据id获取用户信息接口\n */\n ...\n UsersModel.findOne({\n    attributes: { exclude: ['password'] },\n    include: [{ model: RolesModel }], // 预先加载角色模型\n    where: {\n      user_id: user_id\n    }\n  }).then(...)\n")])])]),s("h2",{attrs:{id:"测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#测试"}},[e._v("#")]),e._v(" 测试")]),e._v(" "),s("p",[e._v("因为暂时还没有角色，所以我们先测试获取用户列表")]),e._v(" "),s("p",[s("strong",[e._v("获取用户列表")])]),e._v(" "),s("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/829bc63571ea498f8a590b55620d169a~tplv-k3u1fbpfcp-watermark.image?",alt:"img.png",referrerpolicy:"no-referrer"}}),e._v(" "),s("p",[e._v("可以看到带上了 roles 字段，说明成功了。下文我们将添加角色信息，到时候看得更加直观。")])])}),[],!1,null,null,null);s.default=t.exports}}]);