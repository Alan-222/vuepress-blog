(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{481:function(e,n,t){"use strict";t.r(n);var a=t(2),s=Object(a.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"前言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[e._v("#")]),e._v(" 前言")]),e._v(" "),n("p",[e._v("一般而言，后台管理系统都会有一个统一的布局，其中可以包含头部、侧边栏和内容区域。在本系统中，头部包含左部操作区和用户信息区域，侧边栏展示菜单和系统标题区域，内容区域就是展示 Layout 路由的子路由页面，放置"),n("Outlet"),e._v("标签点击菜单后能展示对应子路由页面。")],1),e._v(" "),n("h2",{attrs:{id:"layout-模块"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#layout-模块"}},[e._v("#")]),e._v(" Layout 模块")]),e._v(" "),n("p",[e._v("所需要的头部、侧边栏、内容区域结构大致如下图所示")]),e._v(" "),n("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9f816b0ef4124bfea66d61634fd09186~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1104&h=723&s=19885&e=png&b=ffffff",alt:"img.png",referrerpolicy:"no-referrer"}}),e._v(" "),n("p",[e._v("我们先来实现外部框架。")]),e._v(" "),n("h3",{attrs:{id:"框架实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#框架实现"}},[e._v("#")]),e._v(" 框架实现")]),e._v(" "),n("p",[e._v("这里 Ant Design 有现成的 Layout 组件，我们挑选一个布局直接用它提供的做下改造。")]),e._v(" "),n("p",[n("strong",[e._v("src/Layout/index.jsx")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import React, { useState } from 'react'\nimport { MenuFoldOutlined, MenuUnfoldOutlined, DashboardFilled } from '@ant-design/icons'\nimport { Layout, Menu, Button, theme, Switch } from 'antd'\nimport './Layout.scss'\nconst { Header, Sider, Content } = Layout\n​\nconst LayoutApp = () => {\n  const [collapsed, setCollapsed] = useState(false)\n  const {\n    token: { colorBgContainer }\n  } = theme.useToken()\n  // 侧边栏主题模式\n  const [themeVari, setThemeVari] = useState('dark')\n  // 切换侧边栏主题颜色\n  const changeTheme = (value) => {\n    setThemeVari(value ? 'light' : 'dark')\n  }\n  return (\n    <Layout className=\"layout\">\n      <Sider trigger={null} collapsible collapsed={collapsed} theme={themeVari}>\n        <div className=\"layout-logo-vertical\" style={{ color: themeVari === 'dark' ? '#fff' : '#000' }}>\n          <span className=\"layout-logo\">\n            {' '}\n            <DashboardFilled />\n          </span>\n          {!collapsed && <span>react-antd5-admin</span>}\n        </div>\n        <Switch\n          className=\"sider-switch\"\n          checkedChildren=\"☀\"\n          unCheckedChildren=\"🌙\"\n          onChange={changeTheme}\n          style={{ transform: collapsed ? 'translateX(15px)' : 'translateX(75px)' }}\n        />\n        <Menu theme={themeVari} mode=\"inline\" defaultSelectedKeys={[]} items={[]} />\n      </Sider>\n      <Layout>\n        <Header\n          style={{\n            padding: 0,\n            background: colorBgContainer\n          }}>\n          <Button\n            type=\"text\"\n            icon={collapsed ? <MenuUnfoldOutlined /> : <MenuFoldOutlined />}\n            onClick={() => setCollapsed(!collapsed)}\n            style={{\n              fontSize: '16px',\n              width: 64,\n              height: 64\n            }}\n          />\n        </Header>\n        <Content\n          style={{\n            margin: '24px 16px',\n            padding: 24,\n            minHeight: 280,\n            background: colorBgContainer\n          }}>\n          Content\n        </Content>\n      </Layout>\n    </Layout>\n  )\n}\nexport default LayoutApp\n")])])]),n("p",[e._v("整体外观如下图：")]),e._v(" "),n("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/40dd09936f2947d386efbe86637298f3~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=2559&h=1206&s=28380&e=png&b=fefefe",alt:"img.png",referrerpolicy:"no-referrer"}}),e._v(" "),n("p",[e._v("完成了框架，接下来我们就来实现各个功能模块")]),e._v(" "),n("h3",{attrs:{id:"头部区域"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#头部区域"}},[e._v("#")]),e._v(" 头部区域")]),e._v(" "),n("p",[e._v("左部的操作按钮区现在就是伸缩侧边栏的按钮，右侧用户信息区域主要就是一个用户头像，悬浮出现下拉框展示修改密码、退出登录的功能按钮。")]),e._v(" "),n("h4",{attrs:{id:"用户头像展示"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#用户头像展示"}},[e._v("#")]),e._v(" 用户头像展示")]),e._v(" "),n("p",[e._v("用户的头像我们直接在全局状态中用户切片的"),n("code",[e._v("userinfo")]),e._v("字段中去取，若有的话展示，无就展示一张默认图片。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  // 用户头像\nconst avatar = useSelector(state=>state.user.userinfo.avatar)\n...\n<Header\n  style={{padding: 0,background: colorBgContainer,\ndisplay: 'flex',justifyContent: 'space-between'\n}}>\n...\n<div className=\"header-right\">\n<Space>\n  <img\n    src={avatar || require('@/assets/images/avatar/default_avatar.jpg')}\n    className=\"user-icon\"\n    alt=\"avatar\"\n  />\n  <DownOutlined />\n</Space>\n</div>\n</Header>\n")])])]),n("h4",{attrs:{id:"下拉菜单"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#下拉菜单"}},[e._v("#")]),e._v(" 下拉菜单")]),e._v(" "),n("p",[e._v("下拉菜单直接用"),n("code",[e._v("Antd")]),e._v("有一个"),n("code",[e._v("Dropdown")]),e._v("组件包裹上面的用户头像")]),e._v(" "),n("blockquote",[n("p",[n("code",[e._v("Dropdown")])]),e._v(" "),n("ul",[n("li",[n("p",[e._v("menu：菜单配置项，其中 items 为菜单项数组")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("items：包含菜单项 item 的配置数组")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("key")]),e._v("：菜单项的唯一标志")]),e._v(" "),n("li",[n("code",[e._v("label")]),e._v("：菜单项标题")])])])])]),e._v(" "),n("li",[n("p",[e._v("placement： 菜单弹出位置："),n("code",[e._v("bottom")]),e._v(" "),n("code",[e._v("bottomLeft")]),e._v(" "),n("code",[e._v("bottomRight")]),e._v(" "),n("code",[e._v("top")]),e._v(" "),n("code",[e._v("topLeft")]),e._v(" "),n("code",[e._v("topRight")])])])])]),e._v(" "),n("p",[e._v("我们先按照格式设置一个菜单数组")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("/** 下拉菜单 */\n// 下拉菜单项数组\nconst dropdownMenuItems = [\n{\n  key: '1',\n  label: (\n    <div onClick={() => console.log('个人中心')}>\n      <UserOutlined /> 个人中心\n    </div>\n  )\n},\n{\n  key: '2',\n  label: (\n    <Popconfirm\n      onConfirm={() => console.log('重置密码')}\n      title=\"是否确认重置密码？\"\n      okText=\"重置\"\n      cancelText=\"取消\">\n      <UndoOutlined /> 重置密码\n    </Popconfirm>\n  )\n},\n{\n  key: '3',\n  label: (\n    <Popconfirm onConfirm={() => console.log('退出登录')} title=\"是否确认退出？\" okText=\"退出\" cancelText=\"取消\">\n      <LogoutOutlined /> 退出登录\n    </Popconfirm>\n  )\n}]\n")])])]),n("p",[e._v("然后模板结构添加 DropDown")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<div className="header-right">\n<Dropdown menu={{ items: dropdownMenuItems }} placement="bottomRight">\n  <Space>\n    ...\n  </Space>\n</Dropdown>\n</div>\n')])])]),n("p",[e._v("完成后展示效果如下所示")]),e._v(" "),n("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d2308c259f5e4e57ab3fcaa604869e14~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=231&h=277&s=12543&e=png&b=fbfafa",alt:"img.png",referrerpolicy:"no-referrer"}}),e._v(" "),n("p",[e._v("接下来我们来完成各个功能，个人中心和重置密码都是弹窗进行表单操作，因为弹窗是通用的组件，我们就先封装一个自定义弹窗。")]),e._v(" "),n("h4",{attrs:{id:"自定义弹窗封装"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自定义弹窗封装"}},[e._v("#")]),e._v(" 自定义弹窗封装")]),e._v(" "),n("p",[e._v("弹窗的封装我们只封装最基本的弹窗组件，然后只向外暴露一个弹窗显隐的方法供外部组件使用。")]),e._v(" "),n("p",[n("strong",[e._v("src/components/CustomModal/index.jsx")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import React, { useState, useImperativeHandle, forwardRef } from 'react'\nimport { Modal } from 'antd'\n// forwardRef : 传递弹窗组件的ref\nconst CustomModal = forwardRef(({ title, children }, ref) => {\n  const [isModalOpen, setIsModalOpen] = useState(false)\n  // 取消事件\n  const handleCancel = () => {\n    setIsModalOpen(false)\n  }\n  // useImperativeHandle：自定义父组件ref.current接收到的方法\n  useImperativeHandle(\n    ref,\n    () => ({\n      toggleShowStatus: (status) => {\n        /** 改变状态 */\n        setIsModalOpen(status)\n      }\n    }),\n    []\n  )\n​\n  return (\n    <Modal title={title} open={isModalOpen} footer={null} onCancel={handleCancel}>\n      {children}\n    </Modal>\n  )\n})\nexport default CustomModal\n")])])]),n("blockquote",[n("p",[n("code",[e._v("useImperativeHandle(ref, createHandle, dependencies?)")])]),e._v(" "),n("p",[e._v("作用：在组件顶层通过调用 "),n("code",[e._v("useImperativeHandle")]),e._v(" 来自定义 ref 暴露出来的句柄（避免父组件直接访问到子组件中的 DOM 节点）：")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("ref")]),e._v("：该 "),n("code",[e._v("ref")]),e._v(" 是你从渲染函数中获得的第二个参数。")]),e._v(" "),n("li",[n("code",[e._v("createHandle")]),e._v("：该函数无需参数，它返回你想要暴露的 ref 的句柄。该句柄可以包含任何类型。通常，你会返回一个包含你想暴露的方法的对象。")]),e._v(" "),n("li",[e._v("可选的"),n("code",[e._v("dependencies")]),e._v("：句柄中的依赖项，变化则句柄重新执行")])])]),e._v(" "),n("h4",{attrs:{id:"个人中心的实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#个人中心的实现"}},[e._v("#")]),e._v(" 个人中心的实现")]),e._v(" "),n("p",[e._v("弹窗已经封装完毕，我们现在再额外创建一个组件去构建内部表单。个人信息中需要修改的头像、用户名、昵称、邮箱作为表单项。这里用户名、昵称、邮箱等文本字段与登录表单类似，在此不再多做赘述。我们便专注于头像的修改。头像的修改用到的是"),n("code",[e._v("upload")]),e._v("上传组件。但我们首先得获取到用户的信息回显。")]),e._v(" "),n("h5",{attrs:{id:"_1-回显信息"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-回显信息"}},[e._v("#")]),e._v(" 1.回显信息")]),e._v(" "),n("p",[n("strong",[e._v("src/Layout/components/UserCenterForm.jsx")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 导入api\nimport userApi from '@/api/user'\n...\n// 获取当前登录用户的id\nconst user_id = useSelector((state) => state.user.userinfo.user_id)\n// 表单组件实例\nconst [form] = Form.useForm()\n// upload组件回显图片\nconst [imageUrl, setImageUrl] = useState()\nuseEffect(() => {\n// 获取当前登录用户信息回显\nconst fetchUserInfo = async () => {\n  const {\n    data: { name, nickname, email, avatar }\n  } = await userApi.center.get(user_id)\n  form.setFieldsValue({\n    name,\n    nickname,\n    email\n  })\n  if (avatar) setImageUrl(process.env.React_APP_IMG_API + '/' + avatar)\n}\nfetchUserInfo()\n}, [form, user_id])\n")])])]),n("h5",{attrs:{id:"_2-设置-upload-组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-设置-upload-组件"}},[e._v("#")]),e._v(" 2.设置 upload 组件")]),e._v(" "),n("p",[e._v("做法一样，直接去官网找 upload 组件用户头像的案例粘过来")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const getBase64 = (img, callback) => {\n  const reader = new FileReader()\n  reader.addEventListener('load', () => callback(reader.result))\n  reader.readAsDataURL(img)\n}\nconst beforeUpload = (file) => {\n  const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png'\n  if (!isJpgOrPng) {\n    message.error('You can only upload JPG/PNG file!')\n  }\n  const isLt2M = file.size / 1024 / 1024 < 2\n  if (!isLt2M) {\n    message.error('Image must smaller than 2MB!')\n  }\n  return isJpgOrPng && isLt2M\n}\nconst UserCenterForm = (props) => {\n  // 获取token\n  const token = useSelector((state) => state.user.token)\n  const [loading, setLoading] = useState(false)\n    /** 图片上传参数及方法 */\n  const uploadUrl =\n    process.env.NODE_ENV === 'development' ? '/api/user/myInfo/updateAvatar' : '/user/myInfo/updateAvatar'\n  const handleChange = (info) => {\n    if (info.file.status === 'uploading') {\n      setLoading(true)\n      return\n    }\n    if (info.file.status === 'done') {\n      // Get this url from response in real world.\n      getBase64(info.file.originFileObj, (url) => {\n        setLoading(false)\n        setImageUrl(url)\n      })\n    }\n  }\n  const uploadButton = (\n    <div>\n      {loading ? <LoadingOutlined /> : <PlusOutlined />}\n      <div\n        style={{\n          marginTop: 8\n        }}>\n        Upload\n      </div>\n    </div>\n  )\n  return (\n    <>\n      <div style={{ marginBottom: 10 }}>头像</div>\n      <Upload\n        name=\"avatar\"\n        listType=\"picture-circle\"\n        className=\"avatar-uploader\"\n        showUploadList={false}\n        action={uploadUrl}\n        headers={{ Authorization: token }}\n        beforeUpload={beforeUpload}\n        onChange={handleChange}\n        style={{ textAlign: 'center' }}>\n        {imageUrl ? (\n          <img\n            src={imageUrl}\n            alt=\"avatar\"\n            style={{\n              width: '100%'\n            }}\n          />\n        ) : (\n          uploadButton\n        )}\n      </Upload>\n      {/* 其余表单项 */}\n      <Form ...>\n      </Form>\n}\n")])])]),n("p",[e._v("3.放置该组件到弹窗里")]),e._v(" "),n("p",[e._v("首先我们要引入"),n("code",[e._v("useRef hook")]),e._v("来接收子组件传递的弹窗显隐的方法，然后设置一个方法操控。其次要传递给内部表单组件以便其能关闭弹窗。")]),e._v(" "),n("p",[n("strong",[e._v("src/Layout/index.jsx")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("...\nimport {useRef} from 'React'\nimport UserCenterForm from './components/UserCenterForm'\n...\n/** 个人中心 */\nconst userCenterRef = useRef()\nconst toggleCenterStatus = (status) => {\n  userCenterRef.current.toggleShowStatus(status)\n}\n...\n<CustomModal title=\"个人中心\" ref={userCenterRef}>\n  <UserCenterForm toggleCenterStatus={toggleCenterStatus} />\n</CustomModal>\n")])])]),n("p",[e._v("个人中心大概就是这样，关键步骤就是 1.封装弹窗组件 2.编写内部表单组件 3.用弹窗组件暴露的方法控制弹窗显隐，重置密码也与此类似，就不再多写了。最后我们看一下效果图")]),e._v(" "),n("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3c47dc1dd204423aab4575324f3a7a3d~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1809&h=1197&s=46212&e=png&b=8b8b8b",alt:"img.png",referrerpolicy:"no-referrer"}}),e._v(" "),n("h4",{attrs:{id:"退出登录"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#退出登录"}},[e._v("#")]),e._v(" 退出登录")]),e._v(" "),n("p",[e._v("退出登录就是确认退出登录后，清空全局状态及浏览器存储中的"),n("code",[e._v("token")]),e._v("和"),n("code",[e._v("refreshToken")]),e._v("。这些我们之前已经写在用户切片的 reducers 配置项中，我们直接分发调用即可。然后我们还得加个确认操作，防止用户误触。")]),e._v(" "),n("p",[n("strong",[e._v("src/Layout/index.jsx")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('...\n/** 下拉菜单 */\n// 下拉菜单项数组\nconst dropdownMenuItems = [\n ...\n     {\n      key: \'3\',\n      label: (\n        <Popconfirm onConfirm={() => handleLogout()} title="是否确认退出？" okText="退出" cancelText="取消">\n          <LogoutOutlined /> 退出登录\n        </Popconfirm>\n      )\n    }\n]\n')])])]),n("p",[e._v("再编写对应"),n("code",[e._v("handleLogout")]),e._v("方法")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import { logout } from '@/store/reducers/userSlice'\n...\n// 退出登录\nconst handleLogout = () => {\n  dispatch(logout())\n  navigate('/login')\n}\n")])])]),n("h2",{attrs:{id:"代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#代码"}},[e._v("#")]),e._v(" 代码")]),e._v(" "),n("p",[e._v("上述实现的代码都放在"),n("a",{attrs:{href:"https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2FAlan-222%2Freact-antd5-admin",title:"https://github.com/Alan-222/react-antd5-admin",target:"_blank",rel:"noopener noreferrer"}},[e._v("react-antd5-admin"),n("OutboundLink")],1),e._v("，大家可自行查阅")])])}),[],!1,null,null,null);n.default=s.exports}}]);